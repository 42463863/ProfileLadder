[{"path":"https://42463863.github.io/ProfileLadder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matúš Maciak. Author, maintainer. Rastislav Matúš. Author, contributor. Ivan Mizera. Author. Michal Pešta. Author.","code":""},{"path":"https://42463863.github.io/ProfileLadder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maciak M, Matúš R, Mizera , Pešta M (2025). ProfileLadder: Functional-Based Chain Ladder Claims Reserving. R package version 0.2.1.","code":"@Manual{,   title = {ProfileLadder: Functional-Based Chain Ladder for Claims Reserving},   author = {Matúš Maciak and Rastislav Matúš and Ivan Mizera and Michal Pešta},   year = {2025},   note = {R package version 0.2.1}, }"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Functional-Based Chain Ladder for Claims Reserving","text":"R package ProfileLadder provides nonparametric, functional-based methods claims reserving based aggregated chain-ladder data also known run-triangles. package implements three estimation/prediction algorithms (PARALLAX, REACT, MACRAME) permutation bootstrap add-proposed Maciak, Mizera, Pešta (2022). package offers flexible computationally effective framework point-wise distributional reserve predictions includes pertinent visualization diagnostic tools S3 methods. also provides accessor functions real-world datasets support exploratory analysis across insurance, operational risks, domains triangular data structures arise, making modern, transparent, extensible alternatives classical approaches accessible insurance industry academic research.","code":""},{"path":"https://42463863.github.io/ProfileLadder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functional-Based Chain Ladder for Claims Reserving","text":"R package ProfileLadder can downloaded CRAN installed R using","code":"install.packages(\"ProfileLadder\")"},{"path":"https://42463863.github.io/ProfileLadder/index.html","id":"core-package-functions","dir":"","previous_headings":"","what":"Core package functions","title":"Functional-Based Chain Ladder for Claims Reserving","text":"parallelReserve implements PARALLAX REACT algorithms mcReserve implements MACRAME algorithm permuteReserve provides distributional reserve prediction (permutation bootstrap)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/CameronMutual.html","id":null,"dir":"Reference","previous_headings":"","what":"Cameron Mutual Insurance Company Data — CameronMutual","title":"Cameron Mutual Insurance Company Data — CameronMutual","text":"illustrative dataset—matrix (dimensions 10x10) ten completed years claims payment developments Cameron Mutual Insurance company period 1988 – 1997.  data matrix contains ten origin/occurrence years (rows first row represents incident year 1988) ten consecutive development periods/years (columns).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/CameronMutual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cameron Mutual Insurance Company Data — CameronMutual","text":"","code":"data(CameronMutual)"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/CameronMutual.html","id":"cameronmutual","dir":"Reference","previous_headings":"","what":"CameronMutual","title":"Cameron Mutual Insurance Company Data — CameronMutual","text":"simple 10x10 matrix class triangle ten origin years (rows) fully developed within ten consecutive development periods/years (columns) origin matrix rows occurrence year (origin) dev matrix columns development period (development)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/CameronMutual.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cameron Mutual Insurance Company Data — CameronMutual","text":"https://www.casact.org/publications-research/research/research-resources (PP Auto Data Set, NAIC group code: 5320)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/CameronMutual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cameron Mutual Insurance Company Data — CameronMutual","text":"run-triangle (upper-left triangular part data matrix) contains positive increments making triangle suitable typical benchmark reserving approach—-dispersed Poisson model (GLM regression model). practice, upper-left triangle (run-triangle) typically observed (known) bottom-right triangular part data matrix treated future payments outcome (\"unknown\" truth) estimated/predicted. Cameron Mutual Insurance data matrix fully observed (.e., obtained retrospectively) allow goodness--fit evaluations.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/CameronMutual.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cameron Mutual Insurance Company Data — CameronMutual","text":"Meyers, G. G. P. Shi (2011). Loss reserving data pulled NAIC Schedule P. Available https://www.casact.org/publications-research/research/research-resources Maciak, M., Mizera, ., Pešta, M. (2022). Functional Profile Techniques Claims Reserving. ASTIN Bulletin, 52(2), 449-482. DOI:10.1017/asb.2022.4 (Portfolio #1)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/GFCIB.html","id":null,"dir":"Reference","previous_headings":"","what":"Guarantee Fund of the Czech Insurers' Bureau Data — GFCIB","title":"Guarantee Fund of the Czech Insurers' Bureau Data — GFCIB","text":"Illustrative datasets provided  Guarantee Fund Czech Insurers' Bureau (GFCIB) mandatory car insurance Czech Republic. quarterly based payments aggregated four run-triangles paid amounts four separate lines business: bodily injury, material damage, technical provision, annuities.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/GFCIB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guarantee Fund of the Czech Insurers' Bureau Data — GFCIB","text":"","code":"data(GFCIB)"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/GFCIB.html","id":"gfcib","dir":"Reference","previous_headings":"","what":"GFCIB","title":"Guarantee Fund of the Czech Insurers' Bureau Data — GFCIB","text":"Four run-triangles (objects class triangle) dimensions 60x60 15 origin years (provided quarterly basis individual rows) 60 development periods/quarters (columns) origin matrix rows occurrence quartal (origin) dev matrix columns development period (development)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/GFCIB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Guarantee Fund of the Czech Insurers' Bureau Data — GFCIB","text":"Czech Insurers’ Bureau https://www.ckp.cz","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/GFCIB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guarantee Fund of the Czech Insurers' Bureau Data — GFCIB","text":"data structured list object GCCIB four elements—one line business: \\$bodilyInjury, \\$materialDamage, \\$provisions, \\$annuity. run-triangles aggregated period first quartal 2008 (Q1) till last quartal 2022 (Q4).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/MidwestMutual.html","id":null,"dir":"Reference","previous_headings":"","what":"Midwest Family Mutual Insurance Company Data — MidwestMutual","title":"Midwest Family Mutual Insurance Company Data — MidwestMutual","text":"illustrative dataset—matrix (dimensions 10x10) ten completed years claims payment developments Midwest Family Mutual Insurance company period 1988 – 1997.  data matrix contains ten origin/occurrence years (first row representing incident year 1988) ten consecutive development periods/years (columns).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/MidwestMutual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Midwest Family Mutual Insurance Company Data — MidwestMutual","text":"","code":"data(MidwestMutual)"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/MidwestMutual.html","id":"midwestmutual","dir":"Reference","previous_headings":"","what":"MidwestMutual","title":"Midwest Family Mutual Insurance Company Data — MidwestMutual","text":"simple 10x10 matrix class triangle ten origin years (rows) fully developed within ten consecutive development periods/years (columns) origin matrix rows occurrence year (origin) dev matrix columns development period (development)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/MidwestMutual.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Midwest Family Mutual Insurance Company Data — MidwestMutual","text":"https://www.casact.org/publications-research/research/research-resources (Liability Data Set, NAIC group code: 23574)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/MidwestMutual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Midwest Family Mutual Insurance Company Data — MidwestMutual","text":"run-triangle (upper-left triangular part data matrix) contains positive increments making triangle suitable standard modelling approach—-dispersed Poisson model (GLM approach). practice, run-triangle (upper triangular part) data matrix known bottom-right triangular part treated future outcome (\"unknown\" truth) estimated/predicted. Midwest Family Mutual Insurance data matrix fully observed allow retrospective goodness--fit evaluations.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/MidwestMutual.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Midwest Family Mutual Insurance Company Data — MidwestMutual","text":"Meyers, G. G. P. Shi (2011). Loss reserving data pulled NAIC Schedule P. Available https://www.casact.org/publications-research/research/research-resources Maciak, M., Mizera, ., Pešta, M. (2022). Functional Profile Techniques Claims Reserving. ASTIN Bulletin, 52(2), 449-482. DOI:10.1017/asb.2022.4 (Portfolio #2)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/NevadaGeneral.html","id":null,"dir":"Reference","previous_headings":"","what":"Nevada General Insurance Company Data — NevadaGeneral","title":"Nevada General Insurance Company Data — NevadaGeneral","text":"illustrative dataset—matrix (dimensions 10x10) ten completed years claims payment developments Nevada General Insurance company period 1988 – 1997.  However, data matrix contains four non-zero origin/occurrence years (period 1994 – 1997) fully developed ten consecutive development periods/years (columns). remaining matrix rows zeros. resulting run-triangle (upper-left triangular part data matrix) , therefore, sparse uninformative.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/NevadaGeneral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nevada General Insurance Company Data — NevadaGeneral","text":"","code":"data(NevadaGeneral)"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/NevadaGeneral.html","id":"nevadageneral","dir":"Reference","previous_headings":"","what":"NevadaGeneral","title":"Nevada General Insurance Company Data — NevadaGeneral","text":"simple 10x10 matrix class triangle ten origin years (rows) fully developed within ten consecutive development periods (columns). However, development profiles nonzero standard (parametric) reserving techniques (e.g. ODP model) applicable origin matrix rows occurrence year (origin) dev matrix columns development period (development)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/NevadaGeneral.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Nevada General Insurance Company Data — NevadaGeneral","text":"https://www.casact.org/publications-research/research/research-resources (PP Auto Data Set, NAIC group code: 10007)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/NevadaGeneral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nevada General Insurance Company Data — NevadaGeneral","text":"practice, reserve sparse run-triangles estimated stochastic model , instead, expert judgement used set reserve. Nevertheless, nonparametric reserving provided PARALLAX, REACT, MACRAME can still achieve resonable reserve predictions","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/NevadaGeneral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Nevada General Insurance Company Data — NevadaGeneral","text":"Meyers, G. G. P. Shi (2011). Loss reserving data pulled NAIC Schedule P. Available https://www.casact.org/publications-research/research/research-resources","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/as.profileLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Method Class profileLadder — as.profileLadder","title":"S3 Method Class profileLadder — as.profileLadder","text":"function make work functional development profiles within run-triangles easy straightforward—particularly vizualizing functional profiles (observed, completed, simultaneously) single plot","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/as.profileLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Method Class profileLadder — as.profileLadder","text":"","code":"as.profileLadder(x)"},{"path":"https://42463863.github.io/ProfileLadder/reference/as.profileLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Method Class profileLadder — as.profileLadder","text":"x object class matrix triangle","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/as.profileLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Method Class profileLadder — as.profileLadder","text":"object class profileLadder list following elements: reserve basic summary run-triangle predicted/true reserve (available otherwise NA values provided instead) method type printed triangle (either run-triangle prediction method applied completed triangle missing fragments imputed one algorithm, PARALLAX, REACT, MACRAME) Triangle input (triangular shaped)  run-triangle FullTriangle completed development profiles imputed using one estimation algorithm (.e., PARALLAX, REACT, MACRAME)—applied—value NA provided otherwise trueComplete true fully developmed profiles run-triangle (available back-testing purposes)  NA returned otherwise","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/as.profileLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Method Class profileLadder — as.profileLadder","text":"","code":"data(CameronMutual) print(CameronMutual)  #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113 13115 #>     3  7452 12421 14171 14752 15066 15354 15637 15720 15744 15786 #>     4  7115 11117 12488 13274 13662 13859 13872 13935 13973 13972 #>     5  5753  8969  9917 10697 11135 11282 11255 11331 11332 11354 #>     6  3937  6524  7989  8543  8757  8901  9013  9012  9046  9164 #>     7  5127  8212  8976  9325  9718  9795  9833  9885  9816  9815 #>     8  5046  8006  8984  9633 10102 10166 10261 10252 10252 10252 #>     9  5129  8202  9185  9681  9951 10033 10133 10182 10182 10183 #>     10 3689  6043  6789  7089  7164  7197  7253  7267  7266  7266 #> attr(,\"class\") #> [1] \"triangle\" \"matrix\"    x <- as.profileLadder(CameronMutual)  print(x) #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                  7963  #>  #> Run-off triangle (complete/fully observed) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13115 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15744 \t15786 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t13935 \t13973 \t13972 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11255 \t11331 \t11332 \t11354 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8901 \t 9013 \t 9012 \t 9046 \t 9164 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9718 \t 9795 \t 9833 \t 9885 \t 9816 \t 9815 \t #> 5046 \t 8006 \t 8984 \t 9633 \t10102 \t10166 \t10261 \t10252 \t10252 \t10252 \t #> 5129 \t 8202 \t 9185 \t 9681 \t 9951 \t10033 \t10133 \t10182 \t10182 \t10183 \t #> 3689 \t 6043 \t 6789 \t 7089 \t 7164 \t 7197 \t 7253 \t 7267 \t 7266 \t 7266 \t plot(x)"},{"path":"https://42463863.github.io/ProfileLadder/reference/covid19CZ.html","id":null,"dir":"Reference","previous_headings":"","what":"First Occurrences of Covid-19 Cases in the Czech Republic — covid19CZ","title":"First Occurrences of Covid-19 Cases in the Czech Republic — covid19CZ","text":"illustrative dataset—matrix (dimensions 4x8) cumulative counts first reported cases Covid-19 pandemic Czech Republic. Four cohorts defined Czech counties first reported case occurred period March 1st – 7th, 2020 (e.g., Prague, Vsetín, Dečín), March 8th – March 14th (e.g, Brno, České Budějovice, Kladno, Mladá Boleslav, Plzeň), March 15th – March 21st (e.g., Chomutov, Český Krumlov, Písek, Tábor), , finally, week March 22nd – March 28th, 2020 (e.g., Jindřichův Hradec, Klatovy, Teplice).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/covid19CZ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First Occurrences of Covid-19 Cases in the Czech Republic — covid19CZ","text":"","code":"data(covid19CZ)"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/covid19CZ.html","id":"covid-cz","dir":"Reference","previous_headings":"","what":"covid19CZ","title":"First Occurrences of Covid-19 Cases in the Czech Republic — covid19CZ","text":"simple 4x8 matrix class triangle four cohorts (rows) consecutively observed 8 weeks (starting March 1st 2020 first case first cohort (first row) reported March 1st)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/covid19CZ.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"First Occurrences of Covid-19 Cases in the Czech Republic — covid19CZ","text":"Institute Health Information Statistics Czech Republic https://www.uzis.cz:443/","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/covid19CZ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"First Occurrences of Covid-19 Cases in the Czech Republic — covid19CZ","text":"cumulative reported cases provided table 8 consecutive development periods (period represents seven consecutive days) starting March 1st, 2020.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/incrExplor.html","id":null,"dir":"Reference","previous_headings":"","what":"Exploration of Run-Off Triangle Increments — incrExplor","title":"Exploration of Run-Off Triangle Increments — incrExplor","text":"function takes cumulative incremental run-triangle (partially completely observed) provides basic exploratory  observed incremental payments. function serves useful tool user-based insight manually defining states Markov Chain used drive reserve prediction MACRAME algorithm implemented within function mcReserve().","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/incrExplor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exploration of Run-Off Triangle Increments — incrExplor","text":"","code":"incrExplor(   triangle,   method = c(\"median\", \"mean\", \"max\", \"min\"),   out = 1,   states = NULL,   breaks = NULL )"},{"path":"https://42463863.github.io/ProfileLadder/reference/incrExplor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exploration of Run-Off Triangle Increments — incrExplor","text":"triangle cumulative incremental run-triangle (object class triangle matrix) specified terms partially observed (run-triangle) fully observed (completed triangle) matrix. upper-left triangular part (run-trangle) used provide output analysis incremental payments underlying Markov chain setting options method method form c(\"median\", \"mean\", \"max\", \"min\") used summarize run-triangle increments within given set bins. bin increments  represented corresponding Markov state value (obtained method choice median DEFAULT option) integer value ranging 1 number development periods (alternatively vector integers) indicate columns run-triangle excluded exploratory analysis increments. DEFAULT, first incremental payments—.e., first column run-triangle—considered (= 1). colums exluded = 0 whole run-triangle analyzed incrExplor(). specify multiple columns excluded, one can use = c(1,2,3) exlude first three columns (first three origins respectively) exploratory analysis states either integer value indicate explicit number Markov chain states used  vector explicit Markov chain states can provided. DEFAULT option (states = NULL) ensures fully data-driven (automatic) set Markov chain states originally proposed Maciak, Mizera, Pešta (2022) breaks numeric vector explicit (unique monotonously increasing) break points define bins run-triangle increments. states equal integer number (.e., explicit number Markov chain states requested states) value breaks ignored. states breaks specified (.e., numeric vectors provided ) set states states must given way exactly one state value belongs exactly one bin defined break points specified breaks","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/incrExplor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exploration of Run-Off Triangle Increments — incrExplor","text":"object class mcSetup following elements: incrTriangle object class triangle incremental run-triangle triangleType type input run-triangle provided input object triangle (cumulative incremental) defaultStates data-driven set explicit states used (DEFAULT) mcReserve() function – MACRAME prediction algorithm defaultBreaks set explicit data-driven breaks used (DEFAULT) mcReserve() function – MACRAME prediction algorithm increments table basic empirical characteristics increments input run-triangle (without first origin payments—values first column run-triangle). Two sets increments provided: raw incremental payments first row table standardized increments (.e., row incremental payments divided maximum payment within row (considering columns specified parameter) userDefined list information regarding user modified input (numeric vector increments increments analyzed; numeric value outColumns denoting excluded columns run-triangle; method used summarize increments within bins; numeric vector resulting Markov chain states states corresponding numeric vector break points breaks defining bins run-triangle increments)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/incrExplor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exploration of Run-Off Triangle Increments — incrExplor","text":"Maciak, M., Mizera, ., Pešta, M. (2022). Functional Profile Techniques Claims Reserving. ASTIN Bulletin, 52(2), 449-482. DOI:10.1017/asb.2022.4","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/incrExplor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exploration of Run-Off Triangle Increments — incrExplor","text":"","code":"data(CameronMutual)   ## default Markov Chain states with (roughly) equally occupied bins  incrExplor(CameronMutual) #> Data-driven (default) setting of the Markov Chain in MACRAME #> MC States: 13 81 197 302.5 438 601 948 1672.5 3073 3993 #>  #> Corresponding bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>   ## five Markov Chain states (with roughly equally occupied bins) incrExplor(CameronMutual, states = 5) #> Data-driven (default) setting of the Markov Chain in MACRAME #> MC States: 13 81 197 302.5 438 601 948 1672.5 3073 3993 #>  #> Corresponding bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>  #> User-modified MC setting #> MC States: 38 283 529 1371 3216 #>  #> Corresponding bins for the run-off triangle increments #> [1] \"[-Inf, 147)\" \"[147, 388)\"  \"[388, 780)\"  \"[780, 2587)\" \"[2587, Inf)\" #>  #> Development periods (run-off triangle columns) not considered: 1 #> Method selected to summarize the increments within each bin: DEFAULT (median)  ## explicitly defined breaks for five increment bins while the Markov states ## are obtained as medians of the increments within each bin incrExplor(CameronMutual, breaks = c(20, 500, 1000, 2000)) #> Data-driven (default) setting of the Markov Chain in MACRAME #> MC States: 13 81 197 302.5 438 601 948 1672.5 3073 3993 #>  #> Corresponding bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>  #> User-modified MC setting #> MC States: 8.5 248.5 764 1595 3216 #>  #> Corresponding bins for the run-off triangle increments #> [1] \"[-Inf, 20)\"   \"[20, 500)\"    \"[500, 1000)\"  \"[1000, 2000)\" \"[2000, Inf)\"  #>  #> Development periods (run-off triangle columns) not considered: 1 #> Method selected to summarize the increments within each bin: DEFAULT (median)  ## explicitly defined breaks for five bins and the Markov states ## are given as the maximum increments within each bin incrExplor(CameronMutual, breaks = c(20, 500, 1000, 2000), method = \"max\") #> Data-driven (default) setting of the Markov Chain in MACRAME #> MC States: 13 81 197 302.5 438 601 948 1672.5 3073 3993 #>  #> Corresponding bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>  #> User-modified MC setting #> MC States: 16 439 978 1786 4969 #>  #> Corresponding bins for the run-off triangle increments #> [1] \"[-Inf, 20)\"   \"[20, 500)\"    \"[500, 1000)\"  \"[1000, 2000)\" \"[2000, Inf)\"  #>  #> Development periods (run-off triangle columns) not considered: 1 #> Method selected to summarize the increments within each bin: max  ## manually defined breaks for the bins and the corresponding states  ## exactly one state must be within each break incrExplor(CameronMutual, breaks = c(20, 500, 1000),                            states = c(10, 250, 800, 1500)) #> Data-driven (default) setting of the Markov Chain in MACRAME #> MC States: 13 81 197 302.5 438 601 948 1672.5 3073 3993 #>  #> Corresponding bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>  #> User-modified MC setting #> MC States: 10 250 800 1500 #>  #> Corresponding bins for the run-off triangle increments #> [1] \"[-Inf, 20)\"  \"[20, 500)\"   \"[500, 1000)\" \"[1000, Inf)\" #>  #> Development periods (run-off triangle columns) not considered: 1 #> Method selected to summarize the increments within each bin: DEFAULT (median)"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcBreaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Markov Chain Breaks for Run-Off Triangle Increments — mcBreaks","title":"Access Markov Chain Breaks for Run-Off Triangle Increments — mcBreaks","text":"Retrieves Markov chain components output incrExplor() function mcReserve() function. particular, function returns set breaks used define bins incremental run-triangle increments.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcBreaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Markov Chain Breaks for Run-Off Triangle Increments — mcBreaks","text":"","code":"mcBreaks(object)"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcBreaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Markov Chain Breaks for Run-Off Triangle Increments — mcBreaks","text":"object object class profileLadder returned function mcReserve() object class mcSetup returned function incrExplor().","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcBreaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Markov Chain Breaks for Run-Off Triangle Increments — mcBreaks","text":"vector break points define set bins run-triangle increments.","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/mcBreaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Markov Chain Breaks for Run-Off Triangle Increments — mcBreaks","text":"","code":"## DEFAULT performance of the incrExplor() function and the MACRAME algorithm output1 <- incrExplor(CameronMutual) output2 <- mcReserve(CameronMutual)  ## Extracting the DEFAULT break points from both outputs mcBreaks(output1) #>  [1] -Inf   75  147  288  388  554  780 1465 2587 3955  Inf mcBreaks(output2) #>  [1] -Inf   75  147  288  388  554  780 1465 2587 3955  Inf  ## Extracting the corresponding break points for 4 Markov states mcBreaks(incrExplor(CameronMutual, states = 4)) #> [1] -Inf  214  554 1750  Inf"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"MACRAME Based Development Profile Reserve — mcReserve","title":"MACRAME Based Development Profile Reserve — mcReserve","text":"function takes cumulative (incremental) run-triangle (partially completely observed) returns reserve prediction obtained MACRAME algorithm (see Maciak, Mizera, Pešta (2022) details).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MACRAME Based Development Profile Reserve — mcReserve","text":"","code":"mcReserve(   chainLadder,   cum = TRUE,   residuals = FALSE,   states = NULL,   breaks = NULL )"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MACRAME Based Development Profile Reserve — mcReserve","text":"chainLadder cumulative incremental run-triangle (triangle must class triangle matrix) terms square matrix fully observed upper-left triangular part. lower-right part also provided function also return standard residuals upper-left (run-) triangle used reserve prediction purposes cum logical indicate type input triangle provided (DEFAULT value TRUE cumulative triangle, FALSE chainLadder incremental type) residuals logical indicate whether (incremental) residuals provided output . run-triangle completely observed residuals obtained terms true increments minus predicted ones. bottom-right triangle available (typical situation practice) residuals obtained terms back-fitting approach (see Maciak, Mizera, Pešta (2022) details). However, back-fitted residuals calculated user specification states (states) breaks (breaks) provided (usually appropriate use states/breaks flipped run-triangle) states numeric value provide either number Markov states used can specify explicit set states instead. default setting (states = NULL) provides set states fully data-driven manner proposed Maciak, Mizera, Pešta (2022) choice  breaks ignored. number states specified states, states obtained analogously Maciak, Mizera, Pešta (2022), however, number actual  states  adjusted parameter breaks ignored parameter states provides explicit vector Markov chain states (smallest state larger smallest observed increment run-triangle , similarly, largest state smaller largest observed increment) corresponding bins (breaks) run-triangle increments defined automatically midpoints provided states (breaks set NULL DEFAULT) breaks vector parameter provides explicit (unique monotonly increasing) break points (disjoint bins) run-triangle incremenets. bin represented corresponding Markov chain state—either values given states provided automatically states valid vector Markov states. breaks provided breaks = c(-Inf, ... , Inf) defining k bins together states vector length k. Alternatively, breaks can also specified set finite numbers defining k bins—cases, parameter states length length(states) = k + 1. value states represent one bin defined breaks","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MACRAME Based Development Profile Reserve — mcReserve","text":"object type list following elements: reserve numeric vector four values: Total paid amount (.e., sum last observed diagonal cumulative run-triangle); Estimated ultimate (.e., sum last column completed cumulative run-triangle); Estimated reserve (.e., sum last column completed cumulative triangle minus sum last observed diagonal chainLadder); True reserve completed chainLadder provided input (.e., sum last column chainLadder minus sum last diagonal chainLadder) method algorithm used reserve estimation Triangle input run-triangle provided chainLadder FullTriangle completed run-triangle (upper-left triangular part identical input triangle chainLadder lower-right trianglular part completed MACRAME algorithm trueCompleted true completed triangle (available) upper-left part used MACRAME algorithm estimate reserve lower-right part provided evaluation purposes. full triangle available NA returned instead residuals triangle corresponding residuals (residuals = TRUE). residuals either provided upper-left triangle (-called back-fitted incremental residuals true completed triangle available) residuals given lower-right triangle (,e., standard incremental residuals—true completed triangle given)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcReserve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MACRAME Based Development Profile Reserve — mcReserve","text":"Maciak, M., Mizera, ., Pešta, M. (2022). Functional Profile Techniques Claims Reserving. ASTIN Bulletin, 52(2), 449-482. DOI:10.1017/asb.2022.4","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/mcReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MACRAME Based Development Profile Reserve — mcReserve","text":"","code":"## run-off (upper-left) triangle with NA values data(MW2014, package = \"ChainLadder\") print(MW2014)  #>       dev #> origin     0     1     2     3     4     5     6     7     8     9    10    11 #>     1  13109 20355 21337 22043 22401 22658 22997 23158 23492 23664 23699 23904 #>     2  14457 22038 22627 23114 23238 23312 23440 23490 23964 23976 24048 24111 #>     3  16075 22672 23753 24052 24206 24757 24786 24807 24823 24888 24986 25401 #>     4  15682 23464 24465 25052 25529 25708 25752 25770 25835 26075 26082 26146 #>     5  16551 23706 24627 25573 26046 26115 26283 26481 26701 26718 26724 26728 #>     6  15439 23796 24866 25317 26139 26154 26175 26205 26764 26818 26836 26959 #>     7  14629 21645 22826 23599 24992 25434 25476 25549 25604 25709 25723    NA #>     8  17585 26288 27623 27939 28335 28638 28715 28759 29525 30302    NA    NA #>     9  17419 25941 27066 27761 28043 28477 28721 28878 28948    NA    NA    NA #>     10 16665 25370 26909 27611 27729 27861 29830 29844    NA    NA    NA    NA #>     11 15471 23745 25117 26378 26971 27396 27480    NA    NA    NA    NA    NA #>     12 15103 23393 26809 27691 28061 29183    NA    NA    NA    NA    NA    NA #>     13 14540 22642 23571 24127 24210    NA    NA    NA    NA    NA    NA    NA #>     14 14590 22336 23440 24029    NA    NA    NA    NA    NA    NA    NA    NA #>     15 13967 21515 22603    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     16 12930 20111    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     17 12539    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>       dev #> origin    12    13    14    15    16 #>     1  23960 23992 23994 24001 24002 #>     2  24252 24538 24540 24550    NA #>     3  25681 25705 25732    NA    NA #>     4  26150 26167    NA    NA    NA #>     5  26735    NA    NA    NA    NA #>     6     NA    NA    NA    NA    NA #>     7     NA    NA    NA    NA    NA #>     8     NA    NA    NA    NA    NA #>     9     NA    NA    NA    NA    NA #>     10    NA    NA    NA    NA    NA #>     11    NA    NA    NA    NA    NA #>     12    NA    NA    NA    NA    NA #>     13    NA    NA    NA    NA    NA #>     14    NA    NA    NA    NA    NA #>     15    NA    NA    NA    NA    NA #>     16    NA    NA    NA    NA    NA #>     17    NA    NA    NA    NA    NA  ## MACRAME reserve prediction with the DEFAULT Markov chain setting  mcReserve(MW2014, residuals = TRUE) #> MACRAME Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>              27861.23             456978.23             429117.00  #>          True Reserve  #>                    NA  #>  #> MACRAME method (functional profile completion) #> 13109 \t20355 \t21337 \t22043 \t22401 \t22658 \t22997 \t23158 \t23492 \t23664 \t23699 \t23904 \t23960 \t23992 \t23994 \t24001 \t24002 \t #> 14457 \t22038 \t22627 \t23114 \t23238 \t23312 \t23440 \t23490 \t23964 \t23976 \t24048 \t24111 \t24252 \t24538 \t24540 \t24550 \t24597 \t #> 16075 \t22672 \t23753 \t24052 \t24206 \t24757 \t24786 \t24807 \t24823 \t24888 \t24986 \t25401 \t25681 \t25705 \t25732 \t25774 \t25899 \t #> 15682 \t23464 \t24465 \t25052 \t25529 \t25708 \t25752 \t25770 \t25835 \t26075 \t26082 \t26146 \t26150 \t26167 \t26209 \t26334 \t26472 \t #> 16551 \t23706 \t24627 \t25573 \t26046 \t26115 \t26283 \t26481 \t26701 \t26718 \t26724 \t26728 \t26735 \t26782 \t26856 \t26993 \t27140 \t #> 15439 \t23796 \t24866 \t25317 \t26139 \t26154 \t26175 \t26205 \t26764 \t26818 \t26836 \t26959 \t27310 \t27573 \t27804 \t28007 \t28194 \t #> 14629 \t21645 \t22826 \t23599 \t24992 \t25434 \t25476 \t25549 \t25604 \t25709 \t25723 \t25770 \t25844 \t25981 \t26128 \t26288 \t26452 \t #> 17585 \t26288 \t27623 \t27939 \t28335 \t28638 \t28715 \t28759 \t29525 \t30302 \t30935 \t31310 \t31570 \t31788 \t31981 \t32165 \t32341 \t #> 17419 \t25941 \t27066 \t27761 \t28043 \t28477 \t28721 \t28878 \t28948 \t29050 \t29209 \t29382 \t29548 \t29720 \t29890 \t30061 \t30231 \t #> 16665 \t25370 \t26909 \t27611 \t27729 \t27861 \t29830 \t29844 \t29891 \t29965 \t30102 \t30249 \t30409 \t30573 \t30741 \t30909 \t31079 \t #> 15471 \t23745 \t25117 \t26378 \t26971 \t27396 \t27480 \t27596 \t27799 \t27972 \t28159 \t28331 \t28507 \t28678 \t28850 \t29021 \t29192 \t #> 15103 \t23393 \t26809 \t27691 \t28061 \t29183 \t29704 \t29971 \t30220 \t30427 \t30625 \t30808 \t30986 \t31161 \t31334 \t31506 \t31677 \t #> 14540 \t22642 \t23571 \t24127 \t24210 \t24326 \t24529 \t24702 \t24889 \t25061 \t25237 \t25408 \t25580 \t25751 \t25922 \t26093 \t26263 \t #> 14590 \t22336 \t23440 \t24029 \t24340 \t24602 \t24817 \t25021 \t25206 \t25387 \t25562 \t25736 \t25908 \t26079 \t26250 \t26421 \t26592 \t #> 13967 \t21515 \t22603 \t23124 \t23391 \t23640 \t23847 \t24045 \t24228 \t24406 \t24581 \t24754 \t24926 \t25097 \t25268 \t25438 \t25609 \t #> 12930 \t20111 \t21134 \t21657 \t21953 \t22202 \t22411 \t22607 \t22789 \t22967 \t23141 \t23314 \t23486 \t23657 \t23828 \t23998 \t24169 \t #> 12539 \t13743 \t14333 \t14663 \t14924 \t15138 \t15335 \t15518 \t15696 \t15870 \t16043 \t16215 \t16386 \t16557 \t16727 \t16898 \t17069 \t  ## complete run-off triangle with 'unknown' truth (lower-bottom run-off triangle)   ## with incremental residuals (true increments minus predicted ones)   data(CameronMutual) mcReserve(CameronMutual, residuals = TRUE) #> MACRAME Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>              8081.963            113240.963            105159.000  #>          True Reserve  #>              7963.000  #>  #> MACRAME method (functional profile completion) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13160 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15756 \t15799 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t13919 \t13960 \t14003 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11340 \t11380 \t11422 \t11464 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8815 \t 8855 \t 8897 \t 8939 \t 8982 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9496 \t 9588 \t 9646 \t 9693 \t 9737 \t 9780 \t #> 5046 \t 8006 \t 8984 \t 9677 \t10157 \t10458 \t10641 \t10759 \t10840 \t10902 \t #> 5129 \t 8202 \t 9244 \t 9808 \t10165 \t10376 \t10502 \t10586 \t10649 \t10701 \t #> 3689 \t 4731 \t 5295 \t 5652 \t 5863 \t 5989 \t 6073 \t 6136 \t 6188 \t 6236 \t  ## the same output in terms of the reserve prediction but back-fitted residuals  ## are provided instead (as the run-off triangle only is provided) data(observed(CameronMutual)) #> Warning: data set ‘observed(CameronMutual)’ not found mcReserve(observed(CameronMutual), residuals = TRUE) #> MACRAME Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>              8081.963            113240.963            105159.000  #>          True Reserve  #>                    NA  #>  #> MACRAME method (functional profile completion) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13160 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15756 \t15799 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t13919 \t13960 \t14003 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11340 \t11380 \t11422 \t11464 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8815 \t 8855 \t 8897 \t 8939 \t 8982 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9496 \t 9588 \t 9646 \t 9693 \t 9737 \t 9780 \t #> 5046 \t 8006 \t 8984 \t 9677 \t10157 \t10458 \t10641 \t10759 \t10840 \t10902 \t #> 5129 \t 8202 \t 9244 \t 9808 \t10165 \t10376 \t10502 \t10586 \t10649 \t10701 \t #> 3689 \t 4731 \t 5295 \t 5652 \t 5863 \t 5989 \t 6073 \t 6136 \t 6188 \t 6236 \t  ## MACRAME reserve prediction with the underlying Markov chain with five  ## explicit Markov chain states mcReserve(CameronMutual, residuals = TRUE, states = c(200, 600, 1000)) #> MACRAME Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>              13089.81             118248.81             105159.00  #>          True Reserve  #>               7963.00  #>  #> MACRAME method (functional profile completion) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13313 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15920 \t16120 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t14072 \t14272 \t14472 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11482 \t11682 \t11882 \t12082 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8957 \t 9157 \t 9357 \t 9557 \t 9757 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9525 \t 9725 \t 9925 \t10125 \t10325 \t10525 \t #> 5046 \t 8006 \t 8984 \t 9784 \t10344 \t10742 \t11046 \t11300 \t11528 \t11741 \t #> 5129 \t 8202 \t 9002 \t 9562 \t 9960 \t10264 \t10518 \t10746 \t10959 \t11166 \t #> 3689 \t 4489 \t 5049 \t 5447 \t 5751 \t 6005 \t 6233 \t 6446 \t 6653 \t 6857"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Markov Chain States in the MACRAME Algorithm — mcStates","title":"Access Markov Chain States in the MACRAME Algorithm — mcStates","text":"Retrieves Markov chain components profileLadder object returned function mcReserve() mcSetup object returned function incrExplor(). particular, function returns vector states used underlying Markov Chain utilized reserve prediction MACRAME algorithm.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Markov Chain States in the MACRAME Algorithm — mcStates","text":"","code":"mcStates(object)"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Markov Chain States in the MACRAME Algorithm — mcStates","text":"object object class profileLadder returned function mcReserve() object class mcSetup returned function incrExplor().","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Markov Chain States in the MACRAME Algorithm — mcStates","text":"vector Markov chain states used MACRAME algorithm.","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/mcStates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Markov Chain States in the MACRAME Algorithm — mcStates","text":"","code":"## MACRAME reserve prediction with the DEFAULT Markov chain setup  output <- mcReserve(CameronMutual)  ## Extracting the corresponding Markov states mcStates(output) #>  [1]   13.0   81.0  197.0  302.5  438.0  601.0  948.0 1672.5 3073.0 3993.0  #' ## Extracting the corresponding states when explicit breaks are used mcStates(mcReserve(CameronMutual, breaks = c(1000, 2000, 3000))) #> [1]  291.0 1595.0 2773.5 3955.0"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcTrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Markov Chain Transition Matrix in the MACRAME Algorithm — mcTrans","title":"Access Markov Chain Transition Matrix in the MACRAME Algorithm — mcTrans","text":"Retrieves Markov chain components profileLadder object returned function mcReserve() – particular, function returns matrix estimated transition probabilities used underlying Markov Chain provide reserve prediction.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcTrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Markov Chain Transition Matrix in the MACRAME Algorithm — mcTrans","text":"","code":"mcTrans(object)"},{"path":"https://42463863.github.io/ProfileLadder/reference/mcTrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Markov Chain Transition Matrix in the MACRAME Algorithm — mcTrans","text":"object object class profileLadder.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/mcTrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Markov Chain Transition Matrix in the MACRAME Algorithm — mcTrans","text":"matrix estimated Markov chain transition probabilities","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/mcTrans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Markov Chain Transition Matrix in the MACRAME Algorithm — mcTrans","text":"","code":"## MACRAME reserve prediction with the DEFAULT Markov chain setup  output <- mcReserve(CameronMutual)  ## Extracting the corresponding break points mcTrans(output) #>         [,1]   [,2]   [,3]   [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,] 0.5000 0.5000 0.0000 0.0000 0.00 0.00 0.00 0.00    0     0 #>  [2,] 0.6667 0.3333 0.0000 0.0000 0.00 0.00 0.00 0.00    0     0 #>  [3,] 0.3333 0.6667 0.0000 0.0000 0.00 0.00 0.00 0.00    0     0 #>  [4,] 0.3333 0.0000 0.3333 0.3333 0.00 0.00 0.00 0.00    0     0 #>  [5,] 0.0000 0.0000 0.6000 0.2000 0.20 0.00 0.00 0.00    0     0 #>  [6,] 0.0000 0.0000 0.2500 0.5000 0.25 0.00 0.00 0.00    0     0 #>  [7,] 0.0000 0.0000 0.0000 0.0000 0.50 0.00 0.50 0.00    0     0 #>  [8,] 0.0000 0.0000 0.0000 0.0000 0.25 0.75 0.00 0.00    0     0 #>  [9,] 0.0000 0.0000 0.0000 0.0000 0.00 0.25 0.50 0.25    0     0 #> [10,] 0.0000 0.0000 0.0000 0.0000 0.00 0.00 0.25 0.75    0     0"},{"path":"https://42463863.github.io/ProfileLadder/reference/observed.html","id":null,"dir":"Reference","previous_headings":"","what":"Observed Run-Off Triangle Layout vs. Predicted (Unknown) Layout — observed","title":"Observed Run-Off Triangle Layout vs. Predicted (Unknown) Layout — observed","text":"Simple layout function  allow work fully developed run-triangles (.e., completed squares also contain typically unknown (future) claim payments). data common actuarial practice usefull retrospective analysis back-testing purposes.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/observed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observed Run-Off Triangle Layout vs. Predicted (Unknown) Layout — observed","text":"","code":"observed(object, cum = TRUE)"},{"path":"https://42463863.github.io/ProfileLadder/reference/observed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observed Run-Off Triangle Layout vs. Predicted (Unknown) Layout — observed","text":"object either integer value denote dimension run-triangle layout (.e., value represents number origins (rows) also number development periods (columns)). Alternatively, cumulative incremental run-triangle (.e, object class matrix triangle) can provided object. case output returns standard run-triangle NA values lower-right triangular part matrix (regardless wheter input triangle object forms run-triangle fully observed triangle—data matrix) cum logical indicate whether output run-triangle supposed cumulative type (DEFAULT) incremental type (cum = FALSE). input object integer value (.e., dimension run-triangle)  choice cum parameter ignored","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/observed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observed Run-Off Triangle Layout vs. Predicted (Unknown) Layout — observed","text":"object integer value function returns TRUE/FALSE layout matrix TRUE values observed (known) part run-triangle (upper-left triangular part matrix) values FALSE otherwise.  object matrix (object class matrix triangle) function returns observed (known) part run-triangle NA values elsewhere. Depending choice cum parameter, either cumulative (DEFAULT) incremental (cum = FALSE) run-triangle returned","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/observed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observed Run-Off Triangle Layout vs. Predicted (Unknown) Layout — observed","text":"","code":"## observed/unobserved layout for the run-off triangle with 5 origins print(observed(5)) #>      [,1]  [,2]  [,3]  [,4]  [,5] #> [1,] TRUE  TRUE  TRUE  TRUE  TRUE #> [2,] TRUE  TRUE  TRUE  TRUE FALSE #> [3,] TRUE  TRUE  TRUE FALSE FALSE #> [4,] TRUE  TRUE FALSE FALSE FALSE #> [5,] TRUE FALSE FALSE FALSE FALSE print(!observed(5)) #>       [,1]  [,2]  [,3]  [,4]  [,5] #> [1,] FALSE FALSE FALSE FALSE FALSE #> [2,] FALSE FALSE FALSE FALSE  TRUE #> [3,] FALSE FALSE FALSE  TRUE  TRUE #> [4,] FALSE FALSE  TRUE  TRUE  TRUE #> [5,] FALSE  TRUE  TRUE  TRUE  TRUE  ## fully observed run-off triangle with typically unknown (future) payments ## included in the lower-right triangular part for evaluation purposes data(CameronMutual) ## the full data matrix observed(CameronMutual) ## cummulative run-off triangle #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113    NA #>     3  7452 12421 14171 14752 15066 15354 15637 15720    NA    NA #>     4  7115 11117 12488 13274 13662 13859 13872    NA    NA    NA #>     5  5753  8969  9917 10697 11135 11282    NA    NA    NA    NA #>     6  3937  6524  7989  8543  8757    NA    NA    NA    NA    NA #>     7  5127  8212  8976  9325    NA    NA    NA    NA    NA    NA #>     8  5046  8006  8984    NA    NA    NA    NA    NA    NA    NA #>     9  5129  8202    NA    NA    NA    NA    NA    NA    NA    NA #>     10 3689    NA    NA    NA    NA    NA    NA    NA    NA    NA observed(CameronMutual, cum = FALSE) ## incremental run-off triangle #>       dev #> origin    1    2    3   4   5   6   7  8  9 10 #>     1  5244 3984 1595 529 439 291  38 79 16  0 #>     2  5984 3955 1786 621 400 163 125 75  4 NA #>     3  7452 4969 1750 581 314 288 283 83 NA NA #>     4  7115 4002 1371 786 388 197  13 NA NA NA #>     5  5753 3216  948 780 438 147  NA NA NA NA #>     6  3937 2587 1465 554 214  NA  NA NA NA NA #>     7  5127 3085  764 349  NA  NA  NA NA NA NA #>     8  5046 2960  978  NA  NA  NA  NA NA NA NA #>     9  5129 3073   NA  NA  NA  NA  NA NA NA NA #>     10 3689   NA   NA  NA  NA  NA  NA NA NA NA"},{"path":"https://42463863.github.io/ProfileLadder/reference/parallelReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Based Development Profile Reserve — parallelReserve","title":"Parallel Based Development Profile Reserve — parallelReserve","text":"function takes cumulative (incremental) run-triangle (partially completely observed) returns reserve prediction obtained PARALLAX REACT algorithm (see Maciak, Mizera, Pešta (2022) details). full data matrix provided input algorithms uses relevant part data—run-triangle (.e., top-left triangular part matrix) standard incremental residuals (true incremental payments minus predicted increments) returned retrospective validation purposes (residuals = TRUE). run-triangle provided ,algorithm caclulates -called back-fitted (incremental) residuals instead (see Maciak, Mizera, Pešta (2022) details).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/parallelReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Based Development Profile Reserve — parallelReserve","text":"","code":"parallelReserve(   chainLadder,   method = \"parallax\",   cum = TRUE,   residuals = FALSE )"},{"path":"https://42463863.github.io/ProfileLadder/reference/parallelReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Based Development Profile Reserve — parallelReserve","text":"chainLadder cumulative incremental run-triangle (triangle must class triangle matrix) terms square matrix (.e., fully observed run-triangle) standard run-triangle instead (.e, top-left triangular part matrix method prediction method used: PARALLAX (DEFAULT method = \"parallax\") REACT (method = \"react\") cum logical (TRUE cumulative triangle FALSE incremental triangle) residuals logical indicate whether  incremental residuals provided . run-triangle complete residuals obtained terms true increments minus predicted increments. bottom-right part triangle available residuals provided terms backfitting approach (see Maciak, Mizera, Pesta (2022) details)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/parallelReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Based Development Profile Reserve — parallelReserve","text":"object class profileLadder list following elements: reserve numeric vector four values summarizing reserve: Total paid amount (.e., sum last observed diagonal cumulative run-triangle); Total estimated amount (.e., sum last column completed cumulative triangle); Estimated reserve (.e., sum last column completed cumulative triangle minus sum last observed diagonal chainLadder); True reserve—completed (true) chainLadder provided input (.e., sum last column chainLadder minus sum last diagonal chainLadder) method algorithm used reserve estimation (PARALLAX REACT) Triangle run-triangle considered input underlying estimation algorithm (PARALLAX REACT) FullTriangle completed functional development profiles (lower-right triangular part completed) estimated PARALLAX algorithm REACT algorithm trueCompleted true (complete) run-triangle (available) NA value provided otherwise residuals triangle corresponding residuals (residuals = TRUE). residuals either provided upper-left triangle (-called back-fitted incremental residuals true completed triangle available) residuals given lower-right triangle (,e., standard incremental residuals—true completed triangle given)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/parallelReserve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parallel Based Development Profile Reserve — parallelReserve","text":"Maciak, M., Mizera, ., Pešta, M. (2022). Functional Profile Techniques Claims Reserving. ASTIN Bulletin, 52(2), 449-482. DOI:10.1017/asb.2022.4","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/parallelReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Based Development Profile Reserve — parallelReserve","text":"","code":"## run-off (upper-left) triangle with NA values (bottom-right part) data(MW2014, package = \"ChainLadder\") print(MW2014)  #>       dev #> origin     0     1     2     3     4     5     6     7     8     9    10    11 #>     1  13109 20355 21337 22043 22401 22658 22997 23158 23492 23664 23699 23904 #>     2  14457 22038 22627 23114 23238 23312 23440 23490 23964 23976 24048 24111 #>     3  16075 22672 23753 24052 24206 24757 24786 24807 24823 24888 24986 25401 #>     4  15682 23464 24465 25052 25529 25708 25752 25770 25835 26075 26082 26146 #>     5  16551 23706 24627 25573 26046 26115 26283 26481 26701 26718 26724 26728 #>     6  15439 23796 24866 25317 26139 26154 26175 26205 26764 26818 26836 26959 #>     7  14629 21645 22826 23599 24992 25434 25476 25549 25604 25709 25723    NA #>     8  17585 26288 27623 27939 28335 28638 28715 28759 29525 30302    NA    NA #>     9  17419 25941 27066 27761 28043 28477 28721 28878 28948    NA    NA    NA #>     10 16665 25370 26909 27611 27729 27861 29830 29844    NA    NA    NA    NA #>     11 15471 23745 25117 26378 26971 27396 27480    NA    NA    NA    NA    NA #>     12 15103 23393 26809 27691 28061 29183    NA    NA    NA    NA    NA    NA #>     13 14540 22642 23571 24127 24210    NA    NA    NA    NA    NA    NA    NA #>     14 14590 22336 23440 24029    NA    NA    NA    NA    NA    NA    NA    NA #>     15 13967 21515 22603    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     16 12930 20111    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     17 12539    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>       dev #> origin    12    13    14    15    16 #>     1  23960 23992 23994 24001 24002 #>     2  24252 24538 24540 24550    NA #>     3  25681 25705 25732    NA    NA #>     4  26150 26167    NA    NA    NA #>     5  26735    NA    NA    NA    NA #>     6     NA    NA    NA    NA    NA #>     7     NA    NA    NA    NA    NA #>     8     NA    NA    NA    NA    NA #>     9     NA    NA    NA    NA    NA #>     10    NA    NA    NA    NA    NA #>     11    NA    NA    NA    NA    NA #>     12    NA    NA    NA    NA    NA #>     13    NA    NA    NA    NA    NA #>     14    NA    NA    NA    NA    NA #>     15    NA    NA    NA    NA    NA #>     16    NA    NA    NA    NA    NA #>     17    NA    NA    NA    NA    NA parallelReserve(MW2014, residuals = TRUE) #> PARALLAX Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                 25385                454502                429117  #>          True Reserve  #>                    NA  #>  #> PARALLAX method (functional profile completion) #> 13109 \t20355 \t21337 \t22043 \t22401 \t22658 \t22997 \t23158 \t23492 \t23664 \t23699 \t23904 \t23960 \t23992 \t23994 \t24001 \t24002 \t #> 14457 \t22038 \t22627 \t23114 \t23238 \t23312 \t23440 \t23490 \t23964 \t23976 \t24048 \t24111 \t24252 \t24538 \t24540 \t24550 \t24551 \t #> 16075 \t22672 \t23753 \t24052 \t24206 \t24757 \t24786 \t24807 \t24823 \t24888 \t24986 \t25401 \t25681 \t25705 \t25732 \t25742 \t25743 \t #> 15682 \t23464 \t24465 \t25052 \t25529 \t25708 \t25752 \t25770 \t25835 \t26075 \t26082 \t26146 \t26150 \t26167 \t26194 \t26204 \t26205 \t #> 16551 \t23706 \t24627 \t25573 \t26046 \t26115 \t26283 \t26481 \t26701 \t26718 \t26724 \t26728 \t26735 \t26752 \t26779 \t26789 \t26790 \t #> 15439 \t23796 \t24866 \t25317 \t26139 \t26154 \t26175 \t26205 \t26764 \t26818 \t26836 \t26959 \t26966 \t26983 \t27010 \t27020 \t27021 \t #> 14629 \t21645 \t22826 \t23599 \t24992 \t25434 \t25476 \t25549 \t25604 \t25709 \t25723 \t25787 \t25791 \t25815 \t25842 \t25852 \t25853 \t #> 17585 \t26288 \t27623 \t27939 \t28335 \t28638 \t28715 \t28759 \t29525 \t30302 \t30320 \t30443 \t30450 \t30467 \t30494 \t30504 \t30505 \t #> 17419 \t25941 \t27066 \t27761 \t28043 \t28477 \t28721 \t28878 \t28948 \t29725 \t29743 \t29866 \t29873 \t29890 \t29917 \t29927 \t29928 \t #> 16665 \t25370 \t26909 \t27611 \t27729 \t27861 \t29830 \t29844 \t29914 \t30691 \t30709 \t30832 \t30839 \t30856 \t30883 \t30893 \t30894 \t #> 15471 \t23745 \t25117 \t26378 \t26971 \t27396 \t27480 \t27678 \t28444 \t29221 \t29239 \t29362 \t29369 \t29386 \t29413 \t29423 \t29424 \t #> 15103 \t23393 \t26809 \t27691 \t28061 \t29183 \t29260 \t29417 \t29487 \t30264 \t30282 \t30405 \t30412 \t30429 \t30456 \t30466 \t30467 \t #> 14540 \t22642 \t23571 \t24127 \t24210 \t24761 \t24790 \t24811 \t24827 \t24892 \t24990 \t25405 \t25685 \t25709 \t25736 \t25746 \t25747 \t #> 14590 \t22336 \t23440 \t24029 \t24183 \t24734 \t24763 \t24784 \t24800 \t24865 \t24963 \t25378 \t25658 \t25682 \t25709 \t25719 \t25720 \t #> 13967 \t21515 \t22603 \t23090 \t23214 \t23288 \t23416 \t23466 \t23940 \t23952 \t24024 \t24087 \t24228 \t24514 \t24516 \t24526 \t24527 \t #> 12930 \t20111 \t21093 \t21799 \t22157 \t22414 \t22753 \t22914 \t23248 \t23420 \t23455 \t23660 \t23716 \t23748 \t23750 \t23757 \t23758 \t #> 12539 \t19720 \t20702 \t21408 \t21766 \t22023 \t22362 \t22523 \t22857 \t23029 \t23064 \t23269 \t23325 \t23357 \t23359 \t23366 \t23367 \t  ## completed run-off triangle with 'unknown' truth (lower-bottom part)   ## for the estimation purposes only the upper-left triangle is used  data(CameronMutual) parallelReserve(CameronMutual, residuals = TRUE) #> PARALLAX Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                  8540                113699                105159  #>          True Reserve  #>                  7963  #>  #> PARALLAX method (functional profile completion) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13113 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15724 \t15724 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t13947 \t13951 \t13951 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11320 \t11399 \t11415 \t11415 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8904 \t 8942 \t 9021 \t 9037 \t 9037 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9539 \t 9686 \t 9724 \t 9803 \t 9819 \t 9819 \t #> 5046 \t 8006 \t 8984 \t 9333 \t 9547 \t 9694 \t 9732 \t 9811 \t 9827 \t 9827 \t #> 5129 \t 8202 \t 8966 \t 9315 \t 9529 \t 9676 \t 9714 \t 9793 \t 9809 \t 9809 \t #> 3689 \t 6276 \t 7741 \t 8295 \t 8509 \t 8656 \t 8694 \t 8773 \t 8789 \t 8789 \t  ## the previous output is identical (in term of the reserve prediction)  ## but back-fitted residuals are provided in the output instead  print(observed(CameronMutual)) #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113    NA #>     3  7452 12421 14171 14752 15066 15354 15637 15720    NA    NA #>     4  7115 11117 12488 13274 13662 13859 13872    NA    NA    NA #>     5  5753  8969  9917 10697 11135 11282    NA    NA    NA    NA #>     6  3937  6524  7989  8543  8757    NA    NA    NA    NA    NA #>     7  5127  8212  8976  9325    NA    NA    NA    NA    NA    NA #>     8  5046  8006  8984    NA    NA    NA    NA    NA    NA    NA #>     9  5129  8202    NA    NA    NA    NA    NA    NA    NA    NA #>     10 3689    NA    NA    NA    NA    NA    NA    NA    NA    NA parallelReserve(observed(CameronMutual), residuals = TRUE) #> PARALLAX Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                  8540                113699                105159  #>          True Reserve  #>                    NA  #>  #> PARALLAX method (functional profile completion) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13113 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15724 \t15724 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t13947 \t13951 \t13951 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11320 \t11399 \t11415 \t11415 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8904 \t 8942 \t 9021 \t 9037 \t 9037 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9539 \t 9686 \t 9724 \t 9803 \t 9819 \t 9819 \t #> 5046 \t 8006 \t 8984 \t 9333 \t 9547 \t 9694 \t 9732 \t 9811 \t 9827 \t 9827 \t #> 5129 \t 8202 \t 8966 \t 9315 \t 9529 \t 9676 \t 9714 \t 9793 \t 9809 \t 9809 \t #> 3689 \t 6276 \t 7741 \t 8295 \t 8509 \t 8656 \t 8694 \t 8773 \t 8789 \t 8789"},{"path":"https://42463863.github.io/ProfileLadder/reference/permuteReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","title":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","text":"function takes completed run-triangle provided either classical parametric reserving technique (ODP model, Mack model, Tweedie model) functional-based alternative (PARALLAX, REACT, MACRAME) estimates overall reserve distribution terms permutation bootstrap approach proposed Maciak, Mizera, Pešta (2022).","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/permuteReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","text":"","code":"permuteReserve(   object,   B = 500,   std = TRUE,   quantile = 0.995,   adjustMC = TRUE,   pb = TRUE )"},{"path":"https://42463863.github.io/ProfileLadder/reference/permuteReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","text":"object object result functional-based reserving method implemented ProfileLadder package (functions parallelReserve() mcReserve() particular) parametric approach ChainLadder package (specifically functions chainladder(), glmReserve(), tweedieReserve(), MackChainLadder()). following object's classes allowed: profileLadder, ChainLadder, glmReserve, tweedieReserve, MackChainLadder. B number bootstrap permutations performed (DEFAULT number permutations set B = 500) std logical indicate whether run-triangle standardized first column increments (TRUE DEFAULT) (std = FALSE).details triangle standardization, see Maciak, Mizera, Pešta (2022) quantile quantile level BootVar. characteristic bootstrapped distribution (DEFAULT choice quantile = 0.995 explicitly required  Solvency II principle used actuaries practice) adjustMC logical (TRUE DEFAULT) indicate whether Markov chain states corresponding breaks adjusted every bootstrap permutation set Markov states breaks used permuted run-triangle (applies input object output MACRAME algorithm—function mcReserve()) pb logical (TRUE DEFAULT) indicate whether progress bar bootstrap resampling used (required R package pbapply) installed","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/permuteReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","text":"object class permutedReserve list following elements: eSummary numeric vector four values summarizing estimated reserve: Paid amount (.e., sum last observed diagonal given cumulative run-triangle); Estimated ultimate (.e., sum last column completed cumulative triangle); Estimated reserve (.e., sum last column completed cumulative triangle minus sum last observed diagonal); True reserve completed (true) run-triangle available pSummary numeric vector four values summarizing overall reserve distribution: Boot.Mean gives verage B permutation bootstrap reserves; Std.Er. provides corresponding standard error B permutation bootstrap reserves; value BootCov% stands percentage proportion standard error average; Finally, BootVar.995 provides estimated 0.995 quantile (DEFAULT) bootstrap reserve distribution (quantile = 0.995 , otherwise, modified acordingly) given relatively respect permutation bootstrapped mean reserve pReserves numeric vector length B estimated (permuted) reserves row-permuted run-triangle B independent Monte Carlo simulation runs pUltimates matrix dimensions B x n (n stands number origin/development periods) B simulated ultimate payments – last column completed run-triangle pLatest matrix dimensions B x n (n stands number origin/development periods) B simulated incremental diagonals pLatestCum matrix dimensions B x n (n number origin/development periods) B simulated cumulative diagonals pFirst matrix dimension B x n (n number origin/development periods) B simulated first payment columns (columns identical std = TRUE) Triangle input run-triangle FullTriangle completed run-triangle using one PARALLAX, REACT, MACRAME estimation method trueComplete true complete run-triangle (available) NA value otherwise info numeric vector summarizing bootstrap computational efficiency: particular, OS/Architecture type, number permutations (B), input run-triangle dimension (n) computation time needed permutation bootstrap calculations","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/permuteReserve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","text":"Maciak, M., Mizera, ., Pešta, M. (2022). Functional Profile Techniques Claims Reserving. ASTIN Bulletin, 52(2), 449-482. DOI:10.1017/asb.2022.4 European Parliament Council (2009). Directive 2009/138/EC European Parliament Council 25 November 2009 taking-pursuit business Insurance Reinsurance (Solvency II). Official Journal European Union, 1–155.https://data.europa.eu/eli/dir/2009/138/oj","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/permuteReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Bootstrap Reserve (PARALLAX, REACT, MACRAME) — permuteReserve","text":"","code":"## REACT algorithm and the permutation bootstrap reserve  data(CameronMutual) output <- parallelReserve(CameronMutual, method = \"react\") summary(permuteReserve(output, B = 100)) #>    |                                           | 0 % ~calculating     |>                                          | 1 % ~00s             |>                                          | 2 % ~00s             |>>                                         | 3 % ~00s             |>>                                         | 4 % ~00s             |>>>                                        | 5 % ~00s             |>>>                                        | 6 % ~00s             |>>>>                                       | 7 % ~00s             |>>>>                                       | 8 % ~00s             |>>>>                                       | 9 % ~00s             |>>>>>                                      | 10% ~00s             |>>>>>                                      | 11% ~00s             |>>>>>>                                     | 12% ~00s             |>>>>>>                                     | 13% ~00s             |>>>>>>>                                    | 14% ~00s             |>>>>>>>                                    | 15% ~00s             |>>>>>>>                                    | 16% ~00s             |>>>>>>>>                                   | 17% ~00s             |>>>>>>>>                                   | 18% ~00s             |>>>>>>>>>                                  | 19% ~00s             |>>>>>>>>>                                  | 20% ~00s             |>>>>>>>>>>                                 | 21% ~00s             |>>>>>>>>>>                                 | 22% ~00s             |>>>>>>>>>>                                 | 23% ~00s             |>>>>>>>>>>>                                | 24% ~00s             |>>>>>>>>>>>                                | 25% ~00s             |>>>>>>>>>>>>                               | 26% ~00s             |>>>>>>>>>>>>                               | 27% ~00s             |>>>>>>>>>>>>>                              | 28% ~00s             |>>>>>>>>>>>>>                              | 29% ~00s             |>>>>>>>>>>>>>                              | 30% ~00s             |>>>>>>>>>>>>>>                             | 31% ~00s             |>>>>>>>>>>>>>>                             | 32% ~00s             |>>>>>>>>>>>>>>>                            | 33% ~00s             |>>>>>>>>>>>>>>>                            | 34% ~00s             |>>>>>>>>>>>>>>>>                           | 35% ~00s             |>>>>>>>>>>>>>>>>                           | 36% ~00s             |>>>>>>>>>>>>>>>>                           | 37% ~00s             |>>>>>>>>>>>>>>>>>                          | 38% ~00s             |>>>>>>>>>>>>>>>>>                          | 39% ~00s             |>>>>>>>>>>>>>>>>>>                         | 40% ~00s             |>>>>>>>>>>>>>>>>>>                         | 41% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 42% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 43% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 44% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 45% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 46% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 47% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 48% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 49% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 50% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 51% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 52% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 53% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 54% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 55% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 56% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 57% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 58% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 59% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 60% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 61% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 62% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 63% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 64% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 65% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 66% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 67% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 68% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 69% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 70% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 71% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 72% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 73% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 74% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 75% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 76% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 77% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 78% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 79% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 80% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 81% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 82% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 83% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 84% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 85% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 86% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 87% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 88% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 89% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 90% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 91% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 92% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 93% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 94% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 95% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 96% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 97% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 98% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 99% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 100% elapsed=00s   #> REACT based reserve prediction (with B = 100 bootstrap permutations) #>       First Latest Dev.To.Date Ultimate IBNR         S.E        CV #> 2      5984  13113   1.0000000    13113    0    0.000000       NaN #> 3      7452  15720   0.9997456    15724    4    3.680721 0.9201803 #> 4      7115  13872   0.9937675    13959   87   29.217040 0.3358280 #> 5      5753  11282   0.9912142    11382  100   88.362555 0.8836256 #> 6      3937   8757   0.9725677     9004  247  103.735962 0.4199837 #> 7      5127   9325   0.9528919     9786  461  115.944697 0.2515069 #> 8      5046   8984   0.9172963     9794  810  167.714923 0.2070555 #> 9      5129   8202   0.8210210     9990 1788  382.052755 0.2136760 #> 10     3689   3689   0.4314620     8550 4861  530.130235 0.1090579 #> total 49232  92944   0.9174942   101302 8358 1012.162229 0.1211010 #>  #> Overall reserve distribution #>      Boot.Mean        Std.Er.       BootCov%    BootVar.995  #>   10332.684421    1012.162229       9.795733       1.236083  #>  #> The REACT predicted reserve represents the 1.98% quantile of the reserve distribution #> Bootstrap simulated reserves beyond 2σ rule: 4 (out of 100) #>   ## MACRAME algorithm with a pre-specified number of states using the same MC  ## states and the same break for each permuted run-off triangle output <- mcReserve(CameronMutual, states = 5) plot(permuteReserve(output, B = 100, adjustMC = FALSE)) #>    |                                           | 0 % ~calculating     |>                                          | 1 % ~01s             |>                                          | 2 % ~01s             |>>                                         | 3 % ~01s             |>>                                         | 4 % ~01s             |>>>                                        | 5 % ~01s             |>>>                                        | 6 % ~01s             |>>>>                                       | 7 % ~01s             |>>>>                                       | 8 % ~01s             |>>>>                                       | 9 % ~01s             |>>>>>                                      | 10% ~01s             |>>>>>                                      | 11% ~01s             |>>>>>>                                     | 12% ~01s             |>>>>>>                                     | 13% ~01s             |>>>>>>>                                    | 14% ~01s             |>>>>>>>                                    | 15% ~01s             |>>>>>>>                                    | 16% ~01s             |>>>>>>>>                                   | 17% ~01s             |>>>>>>>>                                   | 18% ~01s             |>>>>>>>>>                                  | 19% ~01s             |>>>>>>>>>                                  | 20% ~01s             |>>>>>>>>>>                                 | 21% ~01s             |>>>>>>>>>>                                 | 22% ~01s             |>>>>>>>>>>                                 | 23% ~01s             |>>>>>>>>>>>                                | 24% ~01s             |>>>>>>>>>>>                                | 25% ~00s             |>>>>>>>>>>>>                               | 26% ~00s             |>>>>>>>>>>>>                               | 27% ~00s             |>>>>>>>>>>>>>                              | 28% ~00s             |>>>>>>>>>>>>>                              | 29% ~00s             |>>>>>>>>>>>>>                              | 30% ~00s             |>>>>>>>>>>>>>>                             | 31% ~00s             |>>>>>>>>>>>>>>                             | 32% ~00s             |>>>>>>>>>>>>>>>                            | 33% ~01s             |>>>>>>>>>>>>>>>                            | 34% ~01s             |>>>>>>>>>>>>>>>>                           | 35% ~01s             |>>>>>>>>>>>>>>>>                           | 36% ~01s             |>>>>>>>>>>>>>>>>                           | 37% ~00s             |>>>>>>>>>>>>>>>>>                          | 38% ~00s             |>>>>>>>>>>>>>>>>>                          | 39% ~00s             |>>>>>>>>>>>>>>>>>>                         | 40% ~00s             |>>>>>>>>>>>>>>>>>>                         | 41% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 42% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 43% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 44% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 45% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 46% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 47% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 48% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 49% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 50% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 51% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 52% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 53% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 54% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 55% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 56% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 57% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 58% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 59% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 60% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 61% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 62% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 63% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 64% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 65% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 66% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 67% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 68% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 69% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 70% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 71% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 72% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 73% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 74% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 75% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 76% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 77% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 78% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 79% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 80% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 81% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 82% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 83% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 84% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 85% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 86% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 87% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 88% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 89% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 90% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 91% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 92% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 93% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 94% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 95% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 96% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 97% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 98% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 99% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 100% elapsed=01s     ## Permutation bootstrap applied to a completed run-off triangle  ## obtained by a parametric Over-dispersed Poisson model (from ChainLadder pkg) library(\"ChainLadder\") #>  #> Welcome to ChainLadder version 0.2.20 #>  #>  #> To cite package ‘ChainLadder’ in publications use: #>  #>   Gesmann M, Murphy D, Zhang Y, Carrato A, Wuthrich M, Concina F, Dal #>   Moro E (2025). _ChainLadder: Statistical Methods and Models for #>   Claims Reserving in General Insurance_. #>   doi:10.32614/CRAN.package.ChainLadder #>   <https://doi.org/10.32614/CRAN.package.ChainLadder>, R package #>   version 0.2.20, <https://CRAN.R-project.org/package=ChainLadder>. #>  #> To suppress this message use: #> suppressPackageStartupMessages(library(ChainLadder)) output <- permuteReserve(glmReserve(MW2008), B = 100) #>    |                                           | 0 % ~calculating     |>                                          | 1 % ~01s             |>                                          | 2 % ~01s             |>>                                         | 3 % ~01s             |>>                                         | 4 % ~01s             |>>>                                        | 5 % ~01s             |>>>                                        | 6 % ~01s             |>>>>                                       | 7 % ~01s             |>>>>                                       | 8 % ~01s             |>>>>                                       | 9 % ~01s             |>>>>>                                      | 10% ~01s             |>>>>>                                      | 11% ~01s             |>>>>>>                                     | 12% ~01s             |>>>>>>                                     | 13% ~01s             |>>>>>>>                                    | 14% ~01s             |>>>>>>>                                    | 15% ~01s             |>>>>>>>                                    | 16% ~01s             |>>>>>>>>                                   | 17% ~01s             |>>>>>>>>                                   | 18% ~01s             |>>>>>>>>>                                  | 19% ~01s             |>>>>>>>>>                                  | 20% ~01s             |>>>>>>>>>>                                 | 21% ~01s             |>>>>>>>>>>                                 | 22% ~01s             |>>>>>>>>>>                                 | 23% ~01s             |>>>>>>>>>>>                                | 24% ~01s             |>>>>>>>>>>>                                | 25% ~01s             |>>>>>>>>>>>>                               | 26% ~01s             |>>>>>>>>>>>>                               | 27% ~01s             |>>>>>>>>>>>>>                              | 28% ~01s             |>>>>>>>>>>>>>                              | 29% ~01s             |>>>>>>>>>>>>>                              | 30% ~01s             |>>>>>>>>>>>>>>                             | 31% ~01s             |>>>>>>>>>>>>>>                             | 32% ~01s             |>>>>>>>>>>>>>>>                            | 33% ~01s             |>>>>>>>>>>>>>>>                            | 34% ~01s             |>>>>>>>>>>>>>>>>                           | 35% ~01s             |>>>>>>>>>>>>>>>>                           | 36% ~01s             |>>>>>>>>>>>>>>>>                           | 37% ~01s             |>>>>>>>>>>>>>>>>>                          | 38% ~01s             |>>>>>>>>>>>>>>>>>                          | 39% ~01s             |>>>>>>>>>>>>>>>>>>                         | 40% ~01s             |>>>>>>>>>>>>>>>>>>                         | 41% ~01s             |>>>>>>>>>>>>>>>>>>>                        | 42% ~01s             |>>>>>>>>>>>>>>>>>>>                        | 43% ~01s             |>>>>>>>>>>>>>>>>>>>                        | 44% ~01s             |>>>>>>>>>>>>>>>>>>>>                       | 45% ~01s             |>>>>>>>>>>>>>>>>>>>>                       | 46% ~01s             |>>>>>>>>>>>>>>>>>>>>>                      | 47% ~01s             |>>>>>>>>>>>>>>>>>>>>>                      | 48% ~01s             |>>>>>>>>>>>>>>>>>>>>>>                     | 49% ~01s             |>>>>>>>>>>>>>>>>>>>>>>                     | 50% ~01s             |>>>>>>>>>>>>>>>>>>>>>>                     | 51% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 52% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 53% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 54% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 55% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 56% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 57% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 58% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 59% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 60% ~01s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 61% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 62% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 63% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 64% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 65% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 66% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 67% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 68% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 69% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 70% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 71% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 72% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 73% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 74% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 75% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 76% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 77% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 78% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 79% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 80% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 81% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 82% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 83% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 84% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 85% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 86% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 87% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 88% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 89% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 90% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 91% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 92% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 93% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 94% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 95% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 96% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 97% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 98% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 99% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 100% elapsed=01s   summary(output, triangle.summary = TRUE) #> GLM based reserve prediction (with B = 100 bootstrap permutations) #>          First   Latest Dev.To.Date Ultimate    IBNR        S.E         CV #> 2      2350650  3902425   0.9988794  3906803    4378   140.9936 0.03220503 #> 3      2321885  3898825   0.9976083  3908172    9347   443.0090 0.04739585 #> 4      2171487  3548422   0.9920622  3576814   28392  1345.1651 0.04737831 #> 5      2140328  3585812   0.9858561  3637257   51445  3058.5049 0.05945194 #> 6      2290664  3641036   0.9702064  3752847  111811  5890.1219 0.05267927 #> 7      2148216  3428335   0.9482539  3615419  187084  7836.4438 0.04188730 #> 8      2143728  3158581   0.8846463  3570445  411864 17027.9803 0.04134370 #> 9      2144738  2144738   0.5993830  3578243 1433505 51954.1629 0.03624275 #> total 17711696 27308174   0.9242596 29546000 2237826 51067.0548 0.02281994 #>  #> Overall reserve distribution #>      Boot.Mean        Std.Er.       BootCov%    BootVar.995  #>   2.303921e+06   5.106705e+04   2.216528e+00   1.044700e+00  #>  #> The GLM predicted reserve represents the 9.90% quantile of the reserve distribution #> Bootstrap simulated reserves beyond 2σ rule: 2 (out of 100) #>  #> Summary of the permuted run-off triangles (First, Latest, Ultimate) #>          Boot.Firsts (Std.Er) Boot.Latests  (Std.Er) Boot.Ultimates (Std.Err) #> origin 1     2211603 79656.83      3680458 139362.50        3680458  139362.5 #> origin 2     2217691 80820.41      3715999 125662.90        3720168  125803.9 #> origin 3     2220180 87505.50      3720968 154863.22        3729914  155241.3 #> origin 4     2199783 73701.16      3598699 118049.24        3627510  119093.3 #> origin 5     2213400 82872.74      3684146 154483.83        3737109  156841.2 #> origin 6     2209434 76689.68      3519648 116799.45        3628234  120468.1 #> origin 7     2208494 76826.39      3523136 124364.90        3715827  130326.1 #> origin 8     2218190 84984.53      3269103 124524.71        3695581  140892.4 #> origin 9     2215506 77623.82      2215506  77623.82        3696783  129377.4 #>"},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.mcSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of the Run-Off Triangle Increments for the Markov Chain — plot.mcSetup","title":"Visualization of the Run-Off Triangle Increments for the Markov Chain — plot.mcSetup","text":"function provides graphical visualization results obtained incrExplor() function. particular, considered run-triangle increments distributed bins according given Markov chain breaks states. Two figures provided: first figure contains histogram standard incremental residuals conrresponding kernel density estimate. second figure shows increments distributed given set bins (defined break points). addition, corresponding Markov chain states displayed","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.mcSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of the Run-Off Triangle Increments for the Markov Chain — plot.mcSetup","text":"","code":"# S3 method for class 'mcSetup' plot(x, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.mcSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of the Run-Off Triangle Increments for the Markov Chain — plot.mcSetup","text":"x object class mcSetup – .e., output incrExplor() function ... graphical parameters plot","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.mcSetup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of the Run-Off Triangle Increments for the Markov Chain — plot.mcSetup","text":"function returns layout two plots: histogram run-triangle increments barplot increments distributed given set bins","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.mcSetup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of the Run-Off Triangle Increments for the Markov Chain — plot.mcSetup","text":"","code":"## run-off triangle increments within the default bins x <- incrExplor(CameronMutual) plot(x)    ## run-off triangle increments and user-defined number of bins x <- incrExplor(CameronMutual, states = 5) plot(x)    ## run-off triangle increments within the user-specified bins x <- incrExplor(CameronMutual, breaks = c(500, 1000, 1500)) plot(x)"},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.permutedReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting the Output of the Permutation Bootstrap — plot.permutedReserve","title":"Plotting the Output of the Permutation Bootstrap — plot.permutedReserve","text":"function provides graphical visualization results obtained permutation bootstrap (see Maciak, Mizera, Pesta (2022) details) applied output parametric nonparametric reserving technique. particular, classical parametric methods include GLM based reserving, Mack Chain Ladder model, Tweedie model (implemented package ChainLadder). Nonparametric (-called functional-based) methods include three algorithms implemented ProfileLadder package (PARALLAX, REACT, MACRAME)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.permutedReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting the Output of the Permutation Bootstrap — plot.permutedReserve","text":"","code":"# S3 method for class 'permutedReserve' plot(x, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.permutedReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting the Output of the Permutation Bootstrap — plot.permutedReserve","text":"x object class permutedReserve – .e., output permuteReserve() function ... graphical parameters plot","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.permutedReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting the Output of the Permutation Bootstrap — plot.permutedReserve","text":"function returns layout four plots. first panel shows simple barplot type visualization estimated reserve, estimated ultimate, true reserve (available). second panel provides histogram (permuted) bootstrapped reserves nonparametric estimate corresponding density. third panel provides detailed inspection bootstrapped ultimates (true ultimates provided) , finaly, last panel shows observed diagonal vs. simulated ones.","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.permutedReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting the Output of the Permutation Bootstrap — plot.permutedReserve","text":"","code":"## reserve estimated by MACRAME and the corresponding visualization x <- mcReserve(CameronMutual) plot(permuteReserve(x, B = 100)) #>    |                                           | 0 % ~calculating     |>                                          | 1 % ~01s             |>                                          | 2 % ~01s             |>>                                         | 3 % ~01s             |>>                                         | 4 % ~01s             |>>>                                        | 5 % ~01s             |>>>                                        | 6 % ~01s             |>>>>                                       | 7 % ~01s             |>>>>                                       | 8 % ~01s             |>>>>                                       | 9 % ~01s             |>>>>>                                      | 10% ~01s             |>>>>>                                      | 11% ~01s             |>>>>>>                                     | 12% ~01s             |>>>>>>                                     | 13% ~01s             |>>>>>>>                                    | 14% ~01s             |>>>>>>>                                    | 15% ~01s             |>>>>>>>                                    | 16% ~01s             |>>>>>>>>                                   | 17% ~01s             |>>>>>>>>                                   | 18% ~01s             |>>>>>>>>>                                  | 19% ~01s             |>>>>>>>>>                                  | 20% ~01s             |>>>>>>>>>>                                 | 21% ~01s             |>>>>>>>>>>                                 | 22% ~01s             |>>>>>>>>>>                                 | 23% ~01s             |>>>>>>>>>>>                                | 24% ~01s             |>>>>>>>>>>>                                | 25% ~01s             |>>>>>>>>>>>>                               | 26% ~01s             |>>>>>>>>>>>>                               | 27% ~01s             |>>>>>>>>>>>>>                              | 28% ~01s             |>>>>>>>>>>>>>                              | 29% ~01s             |>>>>>>>>>>>>>                              | 30% ~01s             |>>>>>>>>>>>>>>                             | 31% ~01s             |>>>>>>>>>>>>>>                             | 32% ~01s             |>>>>>>>>>>>>>>>                            | 33% ~01s             |>>>>>>>>>>>>>>>                            | 34% ~01s             |>>>>>>>>>>>>>>>>                           | 35% ~01s             |>>>>>>>>>>>>>>>>                           | 36% ~00s             |>>>>>>>>>>>>>>>>                           | 37% ~00s             |>>>>>>>>>>>>>>>>>                          | 38% ~00s             |>>>>>>>>>>>>>>>>>                          | 39% ~00s             |>>>>>>>>>>>>>>>>>>                         | 40% ~00s             |>>>>>>>>>>>>>>>>>>                         | 41% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 42% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 43% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 44% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 45% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 46% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 47% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 48% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 49% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 50% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 51% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 52% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 53% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 54% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 55% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 56% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 57% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 58% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 59% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 60% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 61% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 62% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 63% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 64% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 65% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 66% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 67% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 68% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 69% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 70% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 71% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 72% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 73% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 74% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 75% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 76% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 77% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 78% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 79% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 80% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 81% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 82% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 83% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 84% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 85% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 86% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 87% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 88% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 89% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 90% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 91% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 92% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 93% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 94% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 95% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 96% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 97% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 98% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 99% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 100% elapsed=01s"},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.profileLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Development Profiles — plot.profileLadder","title":"Plotting Development Profiles — plot.profileLadder","text":"function provides graphical representation functional profiles estimated PARALLAX, REACT, MACRAME algorithm (see Maciak, Mizera, Pesta (2022) details). function takes object class profileLadder output parallelReserve() function mcReserve() function. Alternatively, function can also applied visualise run-triangle —triangle class profileLadder.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.profileLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Development Profiles — plot.profileLadder","text":"","code":"# S3 method for class 'profileLadder' plot(   x,   xlab = \"Development period\",   ylab = \"Cumulative claims\",   main = \"\",   default.legend = TRUE,   ... )"},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.profileLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Development Profiles — plot.profileLadder","text":"x object class profileLadder (output form parallelReserve(), mcReserve(), .profileLadder() xlab label x axis ylab label y axis main title plot default.legend logical indicate whether default plot legend (utilizing information R class profileLadder) provided  (DEFAULT) ... graphical parameters plot","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.profileLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Development Profiles — plot.profileLadder","text":"graph observed functional development profiles input run-triangle, estimated/predicted functional segments (.e., functional profile completion provided corresponding estimation method—PARALLAX, REACT, MACRAME) true future profiles (available)","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/plot.profileLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Development Profiles — plot.profileLadder","text":"","code":"## completed run-off triangle with the 'unknown' (future) payments print(triangle <- GFCIB$bodilyInjury[1:15, 1:15]) #>          dev #> origin       1    2    3     4     5     6     7     8     9    10    11    12 #>   2008_Q1  210 2040 3735  5633  7425  9307 10657 11803 12593 13359 13558 14168 #>   2008_Q2  628 2610 4394  7260  8562 10370 11083 14087 16116 16205 16252 16400 #>   2008_Q3  828 6064 9962 15918 16728 17788 18866 19317 20651 21024 21768 24789 #>   2008_Q4  642 3174 5733  7300 10183 11389 12965 13201 13477 13888 14825 15295 #>   2009_Q1  686 1831 2558  3576  3956  4429  4897  5185  5410  5466  5939  5953 #>   2009_Q2  429 2968 4734  6656  8479  9524 10085 11894 12384 13470 13681 14113 #>   2009_Q3  435 1994 5136  8318  9542 10834 12348 13904 14658 15644 15966 16215 #>   2009_Q4 1319 4062 7117  9160 11955 15795 18500 22596 23239 23791 24848 24885 #>   2010_Q1  250 1533 2566  2838  3381  3457  3546  3618  3788  4226  4278  4288 #>   2010_Q2 1264 2303 3346  5017  5905  7031  7495  8023  8256  8406  8927  9845 #>   2010_Q3 1032 2736 5216  7491 11314 12614 13193 19440 19896 20387 20979 21069 #>   2010_Q4  806 2607 4811  5973  6988  9749 10335 10551 13202 13721 13736 14039 #>   2011_Q1  674 1317 1864  2308  2546  2732  2781  3025  3035  3065  3246  3313 #>   2011_Q2  633 1680 3525  4424  5889  8475  9197  9879 10099 11027 11207 20216 #>   2011_Q3 2368 5186 6896  7601  9947 11374 12048 12397 12752 13907 15568 16946 #>          dev #> origin       13    14    15 #>   2008_Q1 14482 14604 15157 #>   2008_Q2 16568 17202 19003 #>   2008_Q3 25186 25704 25956 #>   2008_Q4 16709 18926 19748 #>   2009_Q1  5984  5987  6115 #>   2009_Q2 14191 14505 14820 #>   2009_Q3 17311 18352 18808 #>   2009_Q4 25804 26195 26195 #>   2010_Q1  4288  4288  4296 #>   2010_Q2  9896 10315 10501 #>   2010_Q3 22559 23164 23526 #>   2010_Q4 14295 14718 14760 #>   2011_Q1  3340  3354  3354 #>   2011_Q2 20466 20486 21614 #>   2011_Q3 17043 17045 17168 plot(mcReserve(triangle))   ## completed run-off triangle with unknown future print(observed(triangle)) #>          dev #> origin       1    2    3     4     5     6     7     8     9    10    11    12 #>   2008_Q1  210 2040 3735  5633  7425  9307 10657 11803 12593 13359 13558 14168 #>   2008_Q2  628 2610 4394  7260  8562 10370 11083 14087 16116 16205 16252 16400 #>   2008_Q3  828 6064 9962 15918 16728 17788 18866 19317 20651 21024 21768 24789 #>   2008_Q4  642 3174 5733  7300 10183 11389 12965 13201 13477 13888 14825 15295 #>   2009_Q1  686 1831 2558  3576  3956  4429  4897  5185  5410  5466  5939    NA #>   2009_Q2  429 2968 4734  6656  8479  9524 10085 11894 12384 13470    NA    NA #>   2009_Q3  435 1994 5136  8318  9542 10834 12348 13904 14658    NA    NA    NA #>   2009_Q4 1319 4062 7117  9160 11955 15795 18500 22596    NA    NA    NA    NA #>   2010_Q1  250 1533 2566  2838  3381  3457  3546    NA    NA    NA    NA    NA #>   2010_Q2 1264 2303 3346  5017  5905  7031    NA    NA    NA    NA    NA    NA #>   2010_Q3 1032 2736 5216  7491 11314    NA    NA    NA    NA    NA    NA    NA #>   2010_Q4  806 2607 4811  5973    NA    NA    NA    NA    NA    NA    NA    NA #>   2011_Q1  674 1317 1864    NA    NA    NA    NA    NA    NA    NA    NA    NA #>   2011_Q2  633 1680   NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>   2011_Q3 2368   NA   NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>          dev #> origin       13    14    15 #>   2008_Q1 14482 14604 15157 #>   2008_Q2 16568 17202    NA #>   2008_Q3 25186    NA    NA #>   2008_Q4    NA    NA    NA #>   2009_Q1    NA    NA    NA #>   2009_Q2    NA    NA    NA #>   2009_Q3    NA    NA    NA #>   2009_Q4    NA    NA    NA #>   2010_Q1    NA    NA    NA #>   2010_Q2    NA    NA    NA #>   2010_Q3    NA    NA    NA #>   2010_Q4    NA    NA    NA #>   2011_Q1    NA    NA    NA #>   2011_Q2    NA    NA    NA #>   2011_Q3    NA    NA    NA plot(mcReserve(observed(triangle)))   ## the run-off triangle with future payments without MACRAME completion plot(as.profileLadder(triangle))"},{"path":"https://42463863.github.io/ProfileLadder/reference/print.mcSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Objects of the S3 Class mcSetup — print.mcSetup","title":"Print Objects of the S3 Class mcSetup — print.mcSetup","text":"Function organize print output provided function incrExplor()","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/print.mcSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Objects of the S3 Class mcSetup — print.mcSetup","text":"","code":"# S3 method for class 'mcSetup' print(x, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/print.mcSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Objects of the S3 Class mcSetup — print.mcSetup","text":"x object class mcSetup resulting call  incrExplor() function ... arguments passed print","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/print.mcSetup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Objects of the S3 Class mcSetup — print.mcSetup","text":"displays information resulting call incrExplor() function","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/print.mcSetup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Objects of the S3 Class mcSetup — print.mcSetup","text":"","code":"data(CameronMutual) x <- incrExplor(CameronMutual) print(x)  #> Data-driven (default) setting of the Markov Chain in MACRAME #> MC States: 13 81 197 302.5 438 601 948 1672.5 3073 3993 #>  #> Corresponding bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>"},{"path":"https://42463863.github.io/ProfileLadder/reference/print.permutedReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Objects of the S3 Class permutedReserve — print.permutedReserve","title":"Print Objects of the S3 Class permutedReserve — print.permutedReserve","text":"Function organize print output provided permutation bootstrap method implemented function  permuteReserve()","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/print.permutedReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Objects of the S3 Class permutedReserve — print.permutedReserve","text":"","code":"# S3 method for class 'permutedReserve' print(x, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/print.permutedReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Objects of the S3 Class permutedReserve — print.permutedReserve","text":"x object class permutedReserve resulting call functions permuteReserve() ... arguments passed print","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/print.permutedReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Objects of the S3 Class permutedReserve — print.permutedReserve","text":"Displays information estimated reserve (one estimation algorithms – PARALLAX, REACT, MACRAME) overall reserve distribution resulting call permuteReserve() function","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/print.permutedReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Objects of the S3 Class permutedReserve — print.permutedReserve","text":"","code":"## reserve point prediction by the PARALLAX method output <- parallelReserve(CameronMutual)  ## reserve distribution prediction by the permutation bootstrap x <- permuteReserve(output, B = 100) #>    |                                           | 0 % ~calculating     |>                                          | 1 % ~00s             |>                                          | 2 % ~00s             |>>                                         | 3 % ~00s             |>>                                         | 4 % ~00s             |>>>                                        | 5 % ~00s             |>>>                                        | 6 % ~00s             |>>>>                                       | 7 % ~00s             |>>>>                                       | 8 % ~00s             |>>>>                                       | 9 % ~00s             |>>>>>                                      | 10% ~00s             |>>>>>                                      | 11% ~00s             |>>>>>>                                     | 12% ~00s             |>>>>>>                                     | 13% ~00s             |>>>>>>>                                    | 14% ~00s             |>>>>>>>                                    | 15% ~00s             |>>>>>>>                                    | 16% ~00s             |>>>>>>>>                                   | 17% ~00s             |>>>>>>>>                                   | 18% ~00s             |>>>>>>>>>                                  | 19% ~00s             |>>>>>>>>>                                  | 20% ~00s             |>>>>>>>>>>                                 | 21% ~00s             |>>>>>>>>>>                                 | 22% ~00s             |>>>>>>>>>>                                 | 23% ~00s             |>>>>>>>>>>>                                | 24% ~00s             |>>>>>>>>>>>                                | 25% ~00s             |>>>>>>>>>>>>                               | 26% ~00s             |>>>>>>>>>>>>                               | 27% ~00s             |>>>>>>>>>>>>>                              | 28% ~00s             |>>>>>>>>>>>>>                              | 29% ~00s             |>>>>>>>>>>>>>                              | 30% ~00s             |>>>>>>>>>>>>>>                             | 31% ~00s             |>>>>>>>>>>>>>>                             | 32% ~00s             |>>>>>>>>>>>>>>>                            | 33% ~00s             |>>>>>>>>>>>>>>>                            | 34% ~00s             |>>>>>>>>>>>>>>>>                           | 35% ~00s             |>>>>>>>>>>>>>>>>                           | 36% ~00s             |>>>>>>>>>>>>>>>>                           | 37% ~00s             |>>>>>>>>>>>>>>>>>                          | 38% ~00s             |>>>>>>>>>>>>>>>>>                          | 39% ~00s             |>>>>>>>>>>>>>>>>>>                         | 40% ~00s             |>>>>>>>>>>>>>>>>>>                         | 41% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 42% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 43% ~00s             |>>>>>>>>>>>>>>>>>>>                        | 44% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 45% ~00s             |>>>>>>>>>>>>>>>>>>>>                       | 46% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 47% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 48% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 49% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 50% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 51% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 52% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 53% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 54% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 55% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 56% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 57% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 58% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 59% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 60% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 61% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 62% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 63% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 64% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 65% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 66% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 67% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 68% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 69% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 70% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 71% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 72% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 73% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 74% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 75% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 76% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 77% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 78% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 79% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 80% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 81% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 82% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 83% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 84% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 85% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 86% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 87% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 88% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 89% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 90% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 91% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 92% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 93% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 94% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 95% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 96% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 97% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 98% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 99% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 100% elapsed=00s    ## summary of the results print(x)  #> PARALLAX based reserving #>     Est.Reserve    Est.Ultimate     Paid Amount    True Reserve  #>            8540          113699          105159            7963  #> Permutation bootstrap (B = 100) #>      Boot.Mean        Std.Er.       BootCov%    BootVar.995  #>       9011.124        871.512          9.672          1.238"},{"path":"https://42463863.github.io/ProfileLadder/reference/print.profileLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Objects of the S3 Class profileLadder — print.profileLadder","title":"Print Objects of the S3 Class profileLadder — print.profileLadder","text":"Function organize print outputs provided function parallelReserve() function mcReserve","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/print.profileLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Objects of the S3 Class profileLadder — print.profileLadder","text":"","code":"# S3 method for class 'profileLadder' print(x, fancy.print = getOption(\"profileLadder.fancy\", TRUE), ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/print.profileLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Objects of the S3 Class profileLadder — print.profileLadder","text":"x object class profileLadder resulting call one functions parallelReserve(), mcReserve, .profileLadder() fancy.print logical indicate whether fancy run-triangle printed standard output used instead. default choice TRUE. Note fancy print option uses DEFAULT zero decimal digits. Specific colors fancy print option number decimal points used can set function set.fancy.print(). fancy print option can supressed options(profileLadder.fancy = FALSE). ... arguments passed print","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/print.profileLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Objects of the S3 Class profileLadder — print.profileLadder","text":"displays information resulting call parallelReserve() function mcReserve function","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/print.profileLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Objects of the S3 Class profileLadder — print.profileLadder","text":"","code":"data(CameronMutual) ## full run-off triangle printed with the fancy mode x <- as.profileLadder(CameronMutual) print(x)  #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                  7963  #>  #> Run-off triangle (complete/fully observed) #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t13115 \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t15744 \t15786 \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t13935 \t13973 \t13972 \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t11255 \t11331 \t11332 \t11354 \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t 8901 \t 9013 \t 9012 \t 9046 \t 9164 \t #> 5127 \t 8212 \t 8976 \t 9325 \t 9718 \t 9795 \t 9833 \t 9885 \t 9816 \t 9815 \t #> 5046 \t 8006 \t 8984 \t 9633 \t10102 \t10166 \t10261 \t10252 \t10252 \t10252 \t #> 5129 \t 8202 \t 9185 \t 9681 \t 9951 \t10033 \t10133 \t10182 \t10182 \t10183 \t #> 3689 \t 6043 \t 6789 \t 7089 \t 7164 \t 7197 \t 7253 \t 7267 \t 7266 \t 7266 \t  ## run-off triangle with unobserved future payments  x <- as.profileLadder(observed(CameronMutual)) print(x)  #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                    NA  #>  #> Run-off triangle #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t    . \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t    . \t    . \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t    . \t    . \t    . \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t    . \t    . \t    . \t    . \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t    . \t    . \t    . \t    . \t    . \t #> 5127 \t 8212 \t 8976 \t 9325 \t    . \t    . \t    . \t    . \t    . \t    . \t #> 5046 \t 8006 \t 8984 \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t #> 5129 \t 8202 \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t #> 3689 \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t  ## the same run-off triangle using a standard printing method  options(profileLadder.fancy = FALSE) print(x) #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                    NA  #>  #> Run-off triangle #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113    NA #>     3  7452 12421 14171 14752 15066 15354 15637 15720    NA    NA #>     4  7115 11117 12488 13274 13662 13859 13872    NA    NA    NA #>     5  5753  8969  9917 10697 11135 11282    NA    NA    NA    NA #>     6  3937  6524  7989  8543  8757    NA    NA    NA    NA    NA #>     7  5127  8212  8976  9325    NA    NA    NA    NA    NA    NA #>     8  5046  8006  8984    NA    NA    NA    NA    NA    NA    NA #>     9  5129  8202    NA    NA    NA    NA    NA    NA    NA    NA #>     10 3689    NA    NA    NA    NA    NA    NA    NA    NA    NA"},{"path":"https://42463863.github.io/ProfileLadder/reference/set.fancy.print.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Custom Color Styles for profileLadder Output — set.fancy.print","title":"Set Custom Color Styles for profileLadder Output — set.fancy.print","text":"Function set user-modified color layout run-triangle visualization overall output presentation","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/set.fancy.print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Custom Color Styles for profileLadder Output — set.fancy.print","text":"","code":"set.fancy.print(   color.known = \"#333333\",   color.predicted = \"#CC00CC\",   color.unknown = \"#999999\",   color.info = \"#CC00CC\",   display.digits = 0 )"},{"path":"https://42463863.github.io/ProfileLadder/reference/set.fancy.print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Custom Color Styles for profileLadder Output — set.fancy.print","text":"color.known Color (e.g., hexadecimal code) run-triangle part (upper-left triangle) color.predicted Color (e.g., hexadecimal code) predicted part run-triangle (bottom-right triangle) color.unknown Color (e.g., hexadecimal code) 'unknown' future (bottom-right triangle typically avalaialble insurance practice often provided retrospective evaluations) color.info Color (e.g., hexadecimal code) information messages outputs prediction functions parallelReserve(), mcReserve(), permuteReserve() display.digits number digits used using fancy print option run-triangles. decimal point used DEFAULT (.e., display.digits = 0 DEFAULT)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/set.fancy.print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Custom Color Styles for profileLadder Output — set.fancy.print","text":"Sets  user-defined option fancy print color styles","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/set.fancy.print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Custom Color Styles for profileLadder Output — set.fancy.print","text":"","code":"## fancy print option for the run-off triangle  print(as.profileLadder(observed(CameronMutual)), fancy.print = TRUE) #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                    NA  #>  #> Run-off triangle #> 5244 \t 9228 \t10823 \t11352 \t11791 \t12082 \t12120 \t12199 \t12215 \t12215 \t #> 5984 \t 9939 \t11725 \t12346 \t12746 \t12909 \t13034 \t13109 \t13113 \t    . \t #> 7452 \t12421 \t14171 \t14752 \t15066 \t15354 \t15637 \t15720 \t    . \t    . \t #> 7115 \t11117 \t12488 \t13274 \t13662 \t13859 \t13872 \t    . \t    . \t    . \t #> 5753 \t 8969 \t 9917 \t10697 \t11135 \t11282 \t    . \t    . \t    . \t    . \t #> 3937 \t 6524 \t 7989 \t 8543 \t 8757 \t    . \t    . \t    . \t    . \t    . \t #> 5127 \t 8212 \t 8976 \t 9325 \t    . \t    . \t    . \t    . \t    . \t    . \t #> 5046 \t 8006 \t 8984 \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t #> 5129 \t 8202 \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t #> 3689 \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t    . \t  ## fancy print option for the run-off triangle with two decimals set.fancy.print(display.digits = 2) print(as.profileLadder(observed(CameronMutual))) #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                    NA  #>  #> Run-off triangle #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113    NA #>     3  7452 12421 14171 14752 15066 15354 15637 15720    NA    NA #>     4  7115 11117 12488 13274 13662 13859 13872    NA    NA    NA #>     5  5753  8969  9917 10697 11135 11282    NA    NA    NA    NA #>     6  3937  6524  7989  8543  8757    NA    NA    NA    NA    NA #>     7  5127  8212  8976  9325    NA    NA    NA    NA    NA    NA #>     8  5046  8006  8984    NA    NA    NA    NA    NA    NA    NA #>     9  5129  8202    NA    NA    NA    NA    NA    NA    NA    NA #>     10 3689    NA    NA    NA    NA    NA    NA    NA    NA    NA  ## standard print option for the run-off triangle print(as.profileLadder(observed(CameronMutual)), fancy.print = FALSE) #> Run-off Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                    NA                    NA                105159  #>          True Reserve  #>                    NA  #>  #> Run-off triangle #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113    NA #>     3  7452 12421 14171 14752 15066 15354 15637 15720    NA    NA #>     4  7115 11117 12488 13274 13662 13859 13872    NA    NA    NA #>     5  5753  8969  9917 10697 11135 11282    NA    NA    NA    NA #>     6  3937  6524  7989  8543  8757    NA    NA    NA    NA    NA #>     7  5127  8212  8976  9325    NA    NA    NA    NA    NA    NA #>     8  5046  8006  8984    NA    NA    NA    NA    NA    NA    NA #>     9  5129  8202    NA    NA    NA    NA    NA    NA    NA    NA #>     10 3689    NA    NA    NA    NA    NA    NA    NA    NA    NA  ## PARALLAX based run-off triangle completion (fancy print) options(profileLadder.fancy = TRUE) parallelReserve(CameronMutual) #> PARALLAX Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                  8540                113699                105159  #>          True Reserve  #>                  7963  #>  #> PARALLAX method (functional profile completion) #> 5244.00 \t 9228.00 \t10823.00 \t11352.00 \t11791.00 \t12082.00 \t12120.00 \t12199.00 \t12215.00 \t12215.00 \t #> 5984.00 \t 9939.00 \t11725.00 \t12346.00 \t12746.00 \t12909.00 \t13034.00 \t13109.00 \t13113.00 \t13113.00 \t #> 7452.00 \t12421.00 \t14171.00 \t14752.00 \t15066.00 \t15354.00 \t15637.00 \t15720.00 \t15724.00 \t15724.00 \t #> 7115.00 \t11117.00 \t12488.00 \t13274.00 \t13662.00 \t13859.00 \t13872.00 \t13947.00 \t13951.00 \t13951.00 \t #> 5753.00 \t 8969.00 \t 9917.00 \t10697.00 \t11135.00 \t11282.00 \t11320.00 \t11399.00 \t11415.00 \t11415.00 \t #> 3937.00 \t 6524.00 \t 7989.00 \t 8543.00 \t 8757.00 \t 8904.00 \t 8942.00 \t 9021.00 \t 9037.00 \t 9037.00 \t #> 5127.00 \t 8212.00 \t 8976.00 \t 9325.00 \t 9539.00 \t 9686.00 \t 9724.00 \t 9803.00 \t 9819.00 \t 9819.00 \t #> 5046.00 \t 8006.00 \t 8984.00 \t 9333.00 \t 9547.00 \t 9694.00 \t 9732.00 \t 9811.00 \t 9827.00 \t 9827.00 \t #> 5129.00 \t 8202.00 \t 8966.00 \t 9315.00 \t 9529.00 \t 9676.00 \t 9714.00 \t 9793.00 \t 9809.00 \t 9809.00 \t #> 3689.00 \t 6276.00 \t 7741.00 \t 8295.00 \t 8509.00 \t 8656.00 \t 8694.00 \t 8773.00 \t 8789.00 \t 8789.00 \t  ## PARALLAX based run-off triangle completion (standard print) options(profileLadder.fancy = FALSE) parallelReserve(CameronMutual) #> PARALLAX Reserving  #>     Estimated Reserve    Estimated Ultimate           Paid Amount  #>                  8540                113699                105159  #>          True Reserve  #>                  7963  #>  #> PARALLAX method (functional profile completion) #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>     1  5244  9228 10823 11352 11791 12082 12120 12199 12215 12215 #>     2  5984  9939 11725 12346 12746 12909 13034 13109 13113 13113 #>     3  7452 12421 14171 14752 15066 15354 15637 15720 15724 15724 #>     4  7115 11117 12488 13274 13662 13859 13872 13947 13951 13951 #>     5  5753  8969  9917 10697 11135 11282 11320 11399 11415 11415 #>     6  3937  6524  7989  8543  8757  8904  8942  9021  9037  9037 #>     7  5127  8212  8976  9325  9539  9686  9724  9803  9819  9819 #>     8  5046  8006  8984  9333  9547  9694  9732  9811  9827  9827 #>     9  5129  8202  8966  9315  9529  9676  9714  9793  9809  9809 #>     10 3689  6276  7741  8295  8509  8656  8694  8773  8789  8789"},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.mcSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for the S3 Class Object mcSetup — summary.mcSetup","title":"Summary Method for the S3 Class Object mcSetup — summary.mcSetup","text":"function provides overall summary output function incrExplor()","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.mcSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for the S3 Class Object mcSetup — summary.mcSetup","text":"","code":"# S3 method for class 'mcSetup' summary(object, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.mcSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for the S3 Class Object mcSetup — summary.mcSetup","text":"object object class mcSetup – output incrExplor() function ... used","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.mcSetup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for the S3 Class Object mcSetup — summary.mcSetup","text":"Returns standard summary table (basic description characteristics) raw run-triangle increments standardized (using maximum increment) counterparts. function also returns corresponding bins increments representations terms Markov chain states.","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.mcSetup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for the S3 Class Object mcSetup — summary.mcSetup","text":"","code":"data(CameronMutual) summary(CameronMutual) #>        1              2               3               4               5         #>  Min.   :3689   Min.   : 6043   Min.   : 6789   Min.   : 7089   Min.   : 7164   #>  1st Qu.:5066   1st Qu.: 8055   1st Qu.: 8978   1st Qu.: 9402   1st Qu.: 9776   #>  Median :5186   Median : 8590   Median : 9551   Median :10189   Median :10618   #>  Mean   :5448   Mean   : 8866   Mean   :10105   Mean   :10669   Mean   :11009   #>  3rd Qu.:5926   3rd Qu.: 9761   3rd Qu.:11500   3rd Qu.:12098   3rd Qu.:12507   #>  Max.   :7452   Max.   :12421   Max.   :14171   Max.   :14752   Max.   :15066   #>        6               7               8               9         #>  Min.   : 7197   Min.   : 7253   Min.   : 7267   Min.   : 7266   #>  1st Qu.: 9854   1st Qu.: 9908   1st Qu.: 9959   1st Qu.: 9908   #>  Median :10724   Median :10758   Median :10792   Median :10792   #>  Mean   :11158   Mean   :11241   Mean   :11289   Mean   :11294   #>  3rd Qu.:12702   3rd Qu.:12806   3rd Qu.:12882   3rd Qu.:12888   #>  Max.   :15354   Max.   :15637   Max.   :15720   Max.   :15744   #>        10        #>  Min.   : 7266   #>  1st Qu.: 9907   #>  Median :10803   #>  Mean   :11312   #>  3rd Qu.:12890   #>  Max.   :15786    ## default summary output summary(incrExplor(CameronMutual)) #> Input triangle type: Cumulative #> Summary of the increments #>                 Min   1st Q.   Median      Mean   3rd Q.  Max   Std.Er. #> Raw increments    0 197.0000 529.0000 1126.0000 1595.000 4969 1340.0000 #> Std. increments   0   0.0396   0.1065    0.2267    0.321    1    0.2697 #>  #> Total number of increments: 45,  Total number of unique increments: 45 #> Number of suspicious increments (using 2σ rule): 8,  Outliers (3σ rule): 1 #>  #> Data-driven bins for the run-off triangle increments #>  [1] \"[-Inf, 75)\"   \"[75, 147)\"    \"[147, 288)\"   \"[288, 388)\"   \"[388, 554)\"   #>  [6] \"[554, 780)\"   \"[780, 1465)\"  \"[1465, 2587)\" \"[2587, 3955)\" \"[3955, Inf)\"  #>  #> Markov Chain states (medians of the increments within each bin) #>  [1]   13.0   81.0  197.0  302.5  438.0  601.0  948.0 1672.5 3073.0 3993.0  ## summary output for user-modified settings summary(incrExplor(CameronMutual, states = 5, method = \"mean\")) #> Input triangle type: Cumulative #> Summary of the increments (development periods: 2,3,4,5,6,7,8,9,10) #>                Min   1st Q.   Median      Mean   3rd Q.  Max   Std.Er. #> Raw increments   0 197.0000 529.0000 1126.0000 1595.000 4969 1340.0000 #> Std.increments   0   0.0396   0.1065    0.2267    0.321    1    0.2697 #>  #> Total number of increments: 45,  Total number of unique increments: 45 #> Number of suspicious increments (using 2σ rule): 4,  Outliers (3σ rule): 0 #>  #> User-defined bins for the selected run-off triangle increments #> [1] \"[-Inf, 147)\" \"[147, 388)\"  \"[388, 780)\"  \"[780, 2587)\" \"[2587, Inf)\" #>  #> Markov Chain states (means of the increments within each bin) #> [1]   48.11111  249.55556  523.77778 1273.22222 3536.77778"},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.permutedReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for the S3 Objects permutedReserve — summary.permutedReserve","title":"Summary Method for the S3 Objects permutedReserve — summary.permutedReserve","text":"function provides overall summary output function permuteReserve() (.e., summary object class permutedReserve)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.permutedReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for the S3 Objects permutedReserve — summary.permutedReserve","text":"","code":"# S3 method for class 'permutedReserve' summary(object, triangle.summary = FALSE, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.permutedReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for the S3 Objects permutedReserve — summary.permutedReserve","text":"object object class permutedReserve – .e., output form permuteReserve() functions triangle.summary logical (FALSE DEFAULT) indicating whether brief table empirical summary permutted run-triangles (first column, last running diagonal, ultimate amounts particular) printed output ... used","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.permutedReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for the S3 Objects permutedReserve — summary.permutedReserve","text":"Summary completed functional profiles (provided one functions parallelReserve() mcReserve())  overall reserve distribution obtained terms permutation bootstrap – function permuteReserve(). output list following items: origins matrix row-specific summary completed functional profiles (except first fully developed profile—.e., first row run-triangle). first column matrix (First) gives first origin payments; second column (Latest) gives last available (cumulative) payments (.e., values last running diagonal run-triangle); third column (Dev..Date) gives relative proportion paid amount (Latest) respect estimated ultimate (Ultimate) given fourth column; column denoted IBNR gives estimated amount still left pay (Incurred Reported); sixth column provides estimated standard errors (S.E.) IBNR obtained permutation bootstrap; last column returns corresponding coefficients variation (CV). overall Table summary true/estimated reserve: Paid amount represents sum last running diagonal; Estimated reserve gives reserve estimate provided one estimation algorithm (PARALLAX, REACT, MACRAME); True reserve given sum last column (available, NA otherwise); Finally, Accuracy terms Reserve% given percentage estimated reserve respect true reserve (see Maciak, Mizera, Pešta (2022) Dev..Date gives proportion overall estimatd ultimate overall paid amount dist Table basic empirical characteristics overall reserve distribution provided permutation bootstrap: Boot.Mean stands empirical mean bootstrap distribution; Std.Er. gives corresponding standard error bootstrap distribution; BootCov% stands percentage proportion standard error empirical mean bootstrap distribution; Finally, BootVar.xxx provides estimated quantile bootstrap reserve distribution (0.995 DEFAULT).","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.permutedReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for the S3 Objects permutedReserve — summary.permutedReserve","text":"","code":"data(CameronMutual) summary(CameronMutual) #>        1              2               3               4               5         #>  Min.   :3689   Min.   : 6043   Min.   : 6789   Min.   : 7089   Min.   : 7164   #>  1st Qu.:5066   1st Qu.: 8055   1st Qu.: 8978   1st Qu.: 9402   1st Qu.: 9776   #>  Median :5186   Median : 8590   Median : 9551   Median :10189   Median :10618   #>  Mean   :5448   Mean   : 8866   Mean   :10105   Mean   :10669   Mean   :11009   #>  3rd Qu.:5926   3rd Qu.: 9761   3rd Qu.:11500   3rd Qu.:12098   3rd Qu.:12507   #>  Max.   :7452   Max.   :12421   Max.   :14171   Max.   :14752   Max.   :15066   #>        6               7               8               9         #>  Min.   : 7197   Min.   : 7253   Min.   : 7267   Min.   : 7266   #>  1st Qu.: 9854   1st Qu.: 9908   1st Qu.: 9959   1st Qu.: 9908   #>  Median :10724   Median :10758   Median :10792   Median :10792   #>  Mean   :11158   Mean   :11241   Mean   :11289   Mean   :11294   #>  3rd Qu.:12702   3rd Qu.:12806   3rd Qu.:12882   3rd Qu.:12888   #>  Max.   :15354   Max.   :15637   Max.   :15720   Max.   :15744   #>        10        #>  Min.   : 7266   #>  1st Qu.: 9907   #>  Median :10803   #>  Mean   :11312   #>  3rd Qu.:12890   #>  Max.   :15786    ## summary for the point reserve prediction summary(parallelReserve(CameronMutual)) #> PARALLAX reserve prediction (by origins) #>       First Latest Dev.To.Date Ultimate IBNR #> 2      5984  13113   1.0000000    13113    0 #> 3      7452  15720   0.9997456    15724    4 #> 4      7115  13872   0.9943373    13951   79 #> 5      5753  11282   0.9883487    11415  133 #> 6      3937   8757   0.9690163     9037  280 #> 7      5127   9325   0.9496894     9819  494 #> 8      5046   8984   0.9142159     9827  843 #> 9      5129   8202   0.8361709     9809 1607 #> 10     3689   3689   0.4197292     8789 5100 #> total 49232  92944   0.9158488   101484 8540 #>  #> Overall reserve summary #>     Est.Reserve    Est.Ultimate     Paid Amount    True Reserve        Reserve%  #>         8540.00       113699.00       105159.00         7963.00            7.25  #>   ## summary for the overall reserve distribution summary(permuteReserve(parallelReserve(CameronMutual))) #>    |                                           | 0 % ~calculating     |>                                          | 1 % ~01s             |>                                          | 2 % ~01s             |>>                                         | 3 % ~01s             |>>                                         | 4 % ~01s             |>>>                                        | 5 % ~01s             |>>>                                        | 6 % ~01s             |>>>>                                       | 7 % ~01s             |>>>>                                       | 8 % ~01s             |>>>>                                       | 9 % ~01s             |>>>>>                                      | 10% ~01s             |>>>>>                                      | 11% ~01s             |>>>>>>                                     | 12% ~01s             |>>>>>>                                     | 13% ~01s             |>>>>>>>                                    | 14% ~01s             |>>>>>>>                                    | 15% ~01s             |>>>>>>>                                    | 16% ~01s             |>>>>>>>>                                   | 17% ~01s             |>>>>>>>>                                   | 18% ~01s             |>>>>>>>>>                                  | 19% ~01s             |>>>>>>>>>                                  | 20% ~01s             |>>>>>>>>>>                                 | 21% ~01s             |>>>>>>>>>>                                 | 22% ~01s             |>>>>>>>>>>                                 | 23% ~01s             |>>>>>>>>>>>                                | 24% ~01s             |>>>>>>>>>>>                                | 25% ~01s             |>>>>>>>>>>>>                               | 26% ~01s             |>>>>>>>>>>>>                               | 27% ~01s             |>>>>>>>>>>>>>                              | 28% ~01s             |>>>>>>>>>>>>>                              | 29% ~01s             |>>>>>>>>>>>>>                              | 30% ~01s             |>>>>>>>>>>>>>>                             | 31% ~01s             |>>>>>>>>>>>>>>                             | 32% ~01s             |>>>>>>>>>>>>>>>                            | 33% ~01s             |>>>>>>>>>>>>>>>                            | 34% ~01s             |>>>>>>>>>>>>>>>>                           | 35% ~01s             |>>>>>>>>>>>>>>>>                           | 36% ~01s             |>>>>>>>>>>>>>>>>                           | 37% ~01s             |>>>>>>>>>>>>>>>>>                          | 38% ~01s             |>>>>>>>>>>>>>>>>>                          | 39% ~01s             |>>>>>>>>>>>>>>>>>>                         | 40% ~01s             |>>>>>>>>>>>>>>>>>>                         | 41% ~01s             |>>>>>>>>>>>>>>>>>>>                        | 42% ~01s             |>>>>>>>>>>>>>>>>>>>                        | 43% ~01s             |>>>>>>>>>>>>>>>>>>>                        | 44% ~01s             |>>>>>>>>>>>>>>>>>>>>                       | 45% ~01s             |>>>>>>>>>>>>>>>>>>>>                       | 46% ~01s             |>>>>>>>>>>>>>>>>>>>>>                      | 47% ~00s             |>>>>>>>>>>>>>>>>>>>>>                      | 48% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 49% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 50% ~00s             |>>>>>>>>>>>>>>>>>>>>>>                     | 51% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 52% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>                    | 53% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 54% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>                   | 55% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 56% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 57% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>                  | 58% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 59% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>                 | 60% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 61% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>                | 62% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 63% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 64% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>               | 65% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 66% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              | 67% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 68% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>             | 69% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 70% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 71% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>            | 72% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 73% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           | 74% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 75% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          | 76% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 77% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 78% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         | 79% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 80% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        | 81% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 82% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       | 83% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 84% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 85% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      | 86% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 87% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     | 88% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 89% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    | 90% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 91% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 92% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   | 93% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 94% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  | 95% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 96% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> | 97% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 98% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 99% ~00s             |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| 100% elapsed=01s   #> PARALLAX based reserve prediction (with B = 500 bootstrap permutations) #>       First Latest Dev.To.Date Ultimate IBNR        S.E        CV #> 2      5984  13113   1.0000000    13113    0   0.000000       NaN #> 3      7452  15720   0.9997456    15724    4   8.140809 2.0352022 #> 4      7115  13872   0.9943373    13951   79  25.796637 0.3265397 #> 5      5753  11282   0.9883487    11415  133  58.310669 0.4384261 #> 6      3937   8757   0.9690163     9037  280  68.919919 0.2461426 #> 7      5127   9325   0.9496894     9819  494  98.795958 0.1999918 #> 8      5046   8984   0.9142159     9827  843 223.119200 0.2646728 #> 9      5129   8202   0.8361709     9809 1607 558.080015 0.3472807 #> 10     3689   3689   0.4197292     8789 5100 649.736186 0.1273993 #> total 49232  92944   0.9158488   101484 8540 876.710368 0.1026593 #>  #> Overall reserve distribution #>      Boot.Mean        Std.Er.       BootCov%    BootVar.995  #>    9060.036184     876.710368       9.676676       1.261721  #>  #> The PARALLAX predicted reserve represents the 30.54% quantile of the reserve distribution #> Bootstrap simulated reserves beyond 2σ rule: 17 (out of 500) #>"},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.profileLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for Objects of the S3 Class Method profileLadder — summary.profileLadder","title":"Summary Method for Objects of the S3 Class Method profileLadder — summary.profileLadder","text":"function provides overall summary output functions parallelReserve() mcReserve() (summary object class profileLadder)","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.profileLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for Objects of the S3 Class Method profileLadder — summary.profileLadder","text":"","code":"# S3 method for class 'profileLadder' summary(object, plotOption = FALSE, ...)"},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.profileLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for Objects of the S3 Class Method profileLadder — summary.profileLadder","text":"object object class profileLadder – .e., either run-triangle output form parallelReserve() mcReserve() functions plotOption logical indicate whether graphical output also provided (set DEFAULT FALSE). incremental residuals (standard back-fitted) provided within object x plot provides summary residuals (otherwise simple barplot summarizing estimated reserve given) ... used","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.profileLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for Objects of the S3 Class Method profileLadder — summary.profileLadder","text":"Summary completed functional profiles estimated reserve (provided function parallelReserve() mcReserve()). Summary incremental residuals (standard backfitted) also provided residuals available. output list following items: origins matrix row-specific summary completed functional profiles (except first fully developed profile—.e., first row run-triangle). first column matrix (First) gives first origin payments; second column (Latest) gives last available (cumulative) payments (.e., values last running diagonal run-triangle); third column (Dev..Date) gives relative proportion paid amount (Latest) respect estimated ultimate (Ultimate) given fourth column; Finally, last column (IBNR) gives estimated amount still left pay (Incurred Reported) overall Table summary true/estimated reserve: Paid amount represents sum last running diagonal; Estimated reserve gives reserve estimate provided one estimation algorithm (PARALLAX, REACT, MACRAME); True reserve given sum last column (available, NA otherwise); Finally, Accuracy terms Reserve% given percentage estimated reserve respect true reserve (see Maciak, Mizera, Pešta (2022) Dev..Date gives proportion overall estimatd ultimate overall paid amount resids Table basic empirical description characteristics residuals (standard back-fitted) residuals provided x","code":""},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/summary.profileLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for Objects of the S3 Class Method profileLadder — summary.profileLadder","text":"","code":"data(CameronMutual) summary(CameronMutual) #>        1              2               3               4               5         #>  Min.   :3689   Min.   : 6043   Min.   : 6789   Min.   : 7089   Min.   : 7164   #>  1st Qu.:5066   1st Qu.: 8055   1st Qu.: 8978   1st Qu.: 9402   1st Qu.: 9776   #>  Median :5186   Median : 8590   Median : 9551   Median :10189   Median :10618   #>  Mean   :5448   Mean   : 8866   Mean   :10105   Mean   :10669   Mean   :11009   #>  3rd Qu.:5926   3rd Qu.: 9761   3rd Qu.:11500   3rd Qu.:12098   3rd Qu.:12507   #>  Max.   :7452   Max.   :12421   Max.   :14171   Max.   :14752   Max.   :15066   #>        6               7               8               9         #>  Min.   : 7197   Min.   : 7253   Min.   : 7267   Min.   : 7266   #>  1st Qu.: 9854   1st Qu.: 9908   1st Qu.: 9959   1st Qu.: 9908   #>  Median :10724   Median :10758   Median :10792   Median :10792   #>  Mean   :11158   Mean   :11241   Mean   :11289   Mean   :11294   #>  3rd Qu.:12702   3rd Qu.:12806   3rd Qu.:12882   3rd Qu.:12888   #>  Max.   :15354   Max.   :15637   Max.   :15720   Max.   :15744   #>        10        #>  Min.   : 7266   #>  1st Qu.: 9907   #>  Median :10803   #>  Mean   :11312   #>  3rd Qu.:12890   #>  Max.   :15786    ## standard summary output summary(mcReserve(CameronMutual)) #> MACRAME reserve prediction (by origins) #>       First Latest Dev.To.Date   Ultimate       IBNR #> 2      5984  13113   0.9964286  13160.000   47.00000 #> 3      7452  15720   0.9950067  15798.889   78.88889 #> 4      7115  13872   0.9906724  14002.611  130.61111 #> 5      5753  11282   0.9840866  11464.438  182.43827 #> 6      3937   8757   0.9749940   8981.594  224.59362 #> 7      5127   9325   0.9535135   9779.620  454.61986 #> 8      5046   8984   0.8241040  10901.537 1917.53724 #> 9      5129   8202   0.7664369  10701.468 2499.46806 #> 10     3689   3689   0.5915835   6235.806 2546.80632 #> total 49232  92944   0.9200011 101025.963 8081.96337 #>  #> Overall reserve summary #>     Est.Reserve    Est.Ultimate     Paid Amount    True Reserve        Reserve%  #>         8081.96       113240.96       105159.00         7963.00            1.49  #>   ## summary output with plotOption = TRUE summary(mcReserve(CameronMutual), plotOption = TRUE) #> MACRAME reserve prediction (by origins) #>       First Latest Dev.To.Date   Ultimate       IBNR #> 2      5984  13113   0.9964286  13160.000   47.00000 #> 3      7452  15720   0.9950067  15798.889   78.88889 #> 4      7115  13872   0.9906724  14002.611  130.61111 #> 5      5753  11282   0.9840866  11464.438  182.43827 #> 6      3937   8757   0.9749940   8981.594  224.59362 #> 7      5127   9325   0.9535135   9779.620  454.61986 #> 8      5046   8984   0.8241040  10901.537 1917.53724 #> 9      5129   8202   0.7664369  10701.468 2499.46806 #> 10     3689   3689   0.5915835   6235.806 2546.80632 #> total 49232  92944   0.9200011 101025.963 8081.96337 #>  #> Overall reserve summary #>     Est.Reserve    Est.Ultimate     Paid Amount    True Reserve        Reserve%  #>         8081.96       113240.96       105159.00         7963.00            1.49  #>    ## summary output with (standard) residuals and plotOption = TRUE summary(mcReserve(CameronMutual, residuals = TRUE), plotOption = TRUE) #> MACRAME reserve prediction (by origins) #>       First Latest Dev.To.Date   Ultimate       IBNR #> 2      5984  13113   0.9964286  13160.000   47.00000 #> 3      7452  15720   0.9950067  15798.889   78.88889 #> 4      7115  13872   0.9906724  14002.611  130.61111 #> 5      5753  11282   0.9840866  11464.438  182.43827 #> 6      3937   8757   0.9749940   8981.594  224.59362 #> 7      5127   9325   0.9535135   9779.620  454.61986 #> 8      5046   8984   0.8241040  10901.537 1917.53724 #> 9      5129   8202   0.7664369  10701.468 2499.46806 #> 10     3689   3689   0.5915835   6235.806 2546.80632 #> total 49232  92944   0.9200011 101025.963 8081.96337 #>  #> Overall reserve summary #>     Est.Reserve    Est.Ultimate     Paid Amount    True Reserve        Reserve%  #>         8081.96       113240.96       105159.00         7963.00            1.49  #>  #> Residual summary (standard incremental residuals) #>      Min   1st Q.   Median     Mean   3rd Q.      Max  Std.Er.  #>     -237      -63      -44       -3       -8     1312      215  #>  #> Total number of residuals: 45,  Total number of unique residuals: 45 #> Suspicious residuals (using 2σ rule): 1,  Outliers (3σ rule): 1   ## summary output with (back-fitted) residuals and plotOption = TRUE summary(mcReserve(observed(CameronMutual), residuals = TRUE), plotOption = TRUE) #> MACRAME reserve prediction (by origins) #>       First Latest Dev.To.Date   Ultimate       IBNR #> 2      5984  13113   0.9964286  13160.000   47.00000 #> 3      7452  15720   0.9950067  15798.889   78.88889 #> 4      7115  13872   0.9906724  14002.611  130.61111 #> 5      5753  11282   0.9840866  11464.438  182.43827 #> 6      3937   8757   0.9749940   8981.594  224.59362 #> 7      5127   9325   0.9535135   9779.620  454.61986 #> 8      5046   8984   0.8241040  10901.537 1917.53724 #> 9      5129   8202   0.7664369  10701.468 2499.46806 #> 10     3689   3689   0.5915835   6235.806 2546.80632 #> total 49232  92944   0.9200011 101025.963 8081.96337 #>  #> Overall reserve summary #>     Est.Reserve    Est.Ultimate     Paid Amount    True Reserve        Reserve%  #>         8081.96       113240.96       105159.00              NA              NA  #>  #> Residual summary (backfitted incremental residuals) #>      Min   1st Q.   Median     Mean   3rd Q.      Max  Std.Er.  #>    -6375      -51      113        0      771     4394     2135  #>  #> Total number of residuals: 55,  Total number of unique residuals: 55 #> Suspicious residuals (using 2σ rule): 4,  Outliers (3σ rule): 0"},{"path":"https://42463863.github.io/ProfileLadder/reference/xNetSubscribe.html","id":null,"dir":"Reference","previous_headings":"","what":"Internet Provider Monthly Income Data — xNetSubscribe","title":"Internet Provider Monthly Income Data — xNetSubscribe","text":"illustrative dataset—matrix (dimensions 12x12) monthly-based income (EUR) local internet data provider income structured customers subscribing  within given month (2023) reported rows monthly-based payments reported columns. data matrix represents incremental type run-triangle.","code":""},{"path":"https://42463863.github.io/ProfileLadder/reference/xNetSubscribe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internet Provider Monthly Income Data — xNetSubscribe","text":"","code":"data(xNetSubscribe)"},{"path":[]},{"path":"https://42463863.github.io/ProfileLadder/reference/xNetSubscribe.html","id":"xnetsubscribe","dir":"Reference","previous_headings":"","what":"xNetSubscribe","title":"Internet Provider Monthly Income Data — xNetSubscribe","text":"simple 12x12 (trangular) matrix class triangle twelve consecutive months (January 2023 – December 2023) new customers subscribed stream service (rows) monthly-based payments (columns)","code":""}]
